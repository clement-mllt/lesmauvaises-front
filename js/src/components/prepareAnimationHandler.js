import {gsap} from "gsap";
import {ScrollTrigger} from "gsap/ScrollTrigger.js";
import {ScrollToPlugin} from "gsap/ScrollToPlugin.js";
import {Draggable} from "gsap/Draggable.js";
import {MotionPathPlugin} from "gsap/MotionPathPlugin.js";
import {EaselPlugin} from "gsap/EaselPlugin.js";
import {PixiPlugin} from "gsap/PixiPlugin.js";
import {TextPlugin} from "gsap/TextPlugin.js";
import {DrawSVGPlugin} from "gsap/DrawSVGPlugin.js";
import {SplitText} from "gsap/SplitText.js";
import {MorphSVGPlugin} from "gsap/MorphSVGPlugin.js";
import {numberSource} from "./numberSource";
import {PhysicsPropsPlugin} from "gsap/PhysicsPropsPlugin.js";
import {letterSource} from "./letterSource";
import {animationHandler} from "./animationHandler";

import Matter from "matter-js";

gsap.registerPlugin(
  ScrollTrigger,
  ScrollToPlugin,
  Draggable,
  PhysicsPropsPlugin,
  MotionPathPlugin,
  MorphSVGPlugin,
  SplitText,
  EaselPlugin,
  PixiPlugin,
  TextPlugin,
  DrawSVGPlugin
);

import {utilsHandler} from "./utilsHandler";
import {serviceHandler} from "./serviceHandler";
import {menuHandler} from "./menuHandler";
import { projectHandler } from "./projectHandler";

export class prepareAnimationHandler {
  static currentColorIndex = 2;
  static colors = ["#C62369", "#9B9BC1", "#CDDD20", "#29292E"];
  static isOpen = false;
  static activeVideo = false;
  static currentStepButton = 2;
  static hasClickedFirstAnimation = false;
  static hasClickedSecondAnimation = false;

  static animationFirstSectionHomepage(currentColor) {
    const tl = gsap.timeline({paused: true});
    const tlButton = gsap.timeline({paused: true});
    const containerFirstSection = document.querySelector(".main-container-top");
    const tvElement = document.querySelector(".tv_man");
    const skipVideo = document.querySelector(".skip");
    const containerCurious = document.querySelector(".container-curious");
    const globalLetter = document.querySelectorAll('.mot-croise > div > div >div');


    const firstTransitionBlocs = document.querySelector(
      ".container-transition-top"
    );
    const firstTransitionBlocsDivs = document.querySelectorAll(
      ".container-transition-top > div"
    );

    const videoTvElement = document.querySelector(".video-tv video");
    const videoTvElementTeam = document.querySelector(".video-tv-2 video");

    const buttonPetitPeu = document.querySelector(".container-un-petit-peu");

    const splitText = new SplitText(".validate-partners", {
      type: "chars",
    });
    const splitTitle = new SplitText(".on-target-1", {
      type: "chars",
    });

    const splitTextCurious = new SplitText(".target-curious", {
      type: "chars",
    });
    const splitTextCurious2 = new SplitText(".text-curious-button", {
      type: "chars",
    });

    const menteurText = new SplitText(".menteur", {type: "chars"});
    const lastChanceText = new SplitText(".last-chance", {type: "chars"});
    const nextStepCuriousText = new SplitText(".next-step-text", {
      type: "chars",
    });
    const buttonPositive = document.querySelector(".un-petit-peu");
    const buttonNegative = document.querySelector(".absolument-pas");
    const container = document.getElementById("screenSection");

    const transitionElement = `<svg width="1696" height="1696" id="transitionElement" viewBox="0 0 1696 1696" fill="none" xmlns="http:
    <mask id="mask0_3596_37645" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="243" y="242" width="1210" height="1212">
    <path d="M1041.16 288.981C1044.04 289.846 1046.92 290.711 1049.87 291.593C1037.32 307.841 1065.95 299.429 1061.54 313.014C1064.58 309.944 1065.7 308.825 1066.8 307.688C1071.36 312.234 1077.66 310.114 1082.44 311.674C1092.44 314.913 1100.99 322.376 1110.78 326.7C1115.68 328.871 1121.95 327.939 1130.32 328.634C1127.25 324.411 1125.43 319.323 1121.95 317.644C1109.01 311.386 1095.46 306.382 1082.27 300.599C1078.05 298.75 1074.23 295.986 1070.24 293.628C1071.74 292.56 1073.23 291.508 1074.74 290.44C1072.82 291.22 1070.89 292.017 1067.24 293.51C1068.94 287.998 1070.09 284.25 1071.65 279.179C1121.23 300.124 1170.46 321.087 1210.2 359.145C1213.56 361.774 1218.08 363.741 1219.98 367.184C1222.41 371.594 1221.46 371.831 1226.82 371.051C1228.67 370.779 1231.26 371.627 1232.67 372.899C1242.42 381.702 1252.02 390.691 1261.5 399.781C1266.69 404.75 1271.49 410.11 1276.61 415.13C1282.45 420.862 1283.28 422.745 1284.57 436.601C1286.91 433.769 1288.64 431.7 1290.35 429.614L1293.1 430.089C1292.45 434.227 1292.13 438.484 1290.91 442.435C1290.67 443.182 1286.86 442.673 1284.75 443.063C1283.36 443.317 1281.36 443.843 1280.94 444.827C1280.33 446.235 1280.19 448.762 1281.06 449.762C1284.79 454.036 1288.96 457.92 1294.32 463.313C1297.27 457.004 1300.15 450.848 1303.46 443.775C1312.72 451.102 1310.86 460.294 1309.45 470.284C1311.92 469.911 1314.13 469.588 1316.35 469.249C1317.45 471.997 1318.54 474.761 1320.61 480.002C1321.01 475.1 1321.2 472.862 1321.4 470.352C1338.6 486.837 1348.88 507.324 1361.68 529.966C1355.49 528.796 1353.05 528.338 1350.88 527.931C1346.4 534.308 1350.68 538.633 1363.8 541.312C1362.67 537.276 1361.63 533.595 1359.94 527.609C1376.56 550.742 1381.83 565.412 1379.63 571.738C1379.87 574.147 1379.76 576.64 1380.44 578.93C1380.97 580.71 1382.05 582.881 1383.55 583.746C1390.99 588.037 1393.13 594.516 1395.42 602.69C1400.2 619.735 1408.56 635.762 1413.99 652.672C1423.11 681.13 1432.31 709.674 1439.14 738.727C1443.82 758.655 1445.03 779.465 1446.87 799.952C1448.89 822.373 1449.03 844.998 1451.66 867.334C1453.12 879.647 1453.03 891.468 1451.59 903.68C1450.11 916.196 1450.84 928.984 1449.27 941.467C1447.54 955.17 1444.11 968.653 1441.7 982.272C1439.87 992.669 1438.7 1003.18 1436.78 1013.56C1436.17 1016.87 1433.65 1019.8 1432.76 1023.11C1431.54 1027.76 1431.22 1032.64 1430.19 1037.34C1429.2 1041.84 1427.86 1046.25 1426.52 1050.66C1424.03 1058.93 1421.76 1067.31 1418.77 1075.4C1415.31 1084.74 1411.39 1093.92 1407.09 1102.89C1406.51 1104.08 1402.49 1103.6 1401.35 1103.74C1400.01 1111.12 1400.22 1119.19 1396.89 1125.33C1394.2 1130.28 1391.79 1137.42 1383.7 1138.59C1381.75 1138.86 1379.97 1143.88 1379.2 1146.99C1378.87 1148.36 1381.26 1150.41 1382.75 1152.69C1382.85 1152.65 1381.75 1153.16 1380.59 1153.42C1379.12 1153.74 1377.59 1153.87 1376.12 1154.09C1379.31 1167.17 1375.47 1172.09 1361.53 1171.55C1361.99 1174.33 1363.35 1177.31 1362.57 1179.52C1361.91 1181.38 1358.75 1182.35 1356.49 1183.84C1358.11 1186.11 1359.78 1188.49 1362.38 1192.15C1354.56 1196.71 1347.34 1200.92 1340.03 1205.18C1341.47 1208.26 1343.16 1211.91 1344.86 1215.56C1344.27 1215.91 1343.67 1216.29 1343.08 1216.64C1341.49 1213.74 1339.87 1210.84 1337.96 1207.38C1330.38 1217.59 1324.19 1227.21 1316.67 1235.65C1309.02 1244.27 1300.07 1251.73 1291.13 1260.21C1296.56 1265.66 1301.41 1271.68 1290.2 1276.99C1289.01 1268.9 1285.18 1268.85 1279.16 1274.36C1281.43 1275.85 1283.72 1277.38 1286.03 1278.89C1285.36 1279.75 1284.69 1280.62 1284.02 1281.46C1279.67 1279.94 1275.31 1278.41 1270.69 1276.8C1270.22 1279.56 1269.74 1282.35 1269.46 1284.08C1256.91 1292.89 1238.66 1295.52 1241.68 1316.79C1241.3 1314.57 1240.93 1312.35 1240.56 1310.13C1239.84 1309.91 1239.15 1309.69 1238.44 1309.48C1237.32 1312.26 1234.45 1316.35 1235.37 1317.59C1241.74 1326.15 1234.25 1328.73 1228.21 1334.09C1225.48 1329.73 1223.02 1325.81 1219.46 1320.13C1215.15 1319.74 1215.86 1319.69 1216.41 1327.1C1216.71 1331.41 1214.29 1335.92 1213.17 1340.06C1211.54 1338.5 1208.3 1335.43 1202.77 1330.16C1203.35 1336.92 1203.63 1340.47 1204.01 1344.78C1198.43 1344.32 1193.24 1343.88 1188.05 1343.45C1188.05 1342.57 1188.06 1341.69 1188.08 1340.82C1184.96 1343.22 1182.01 1345.88 1178.67 1347.93C1174.94 1350.22 1169.92 1350.56 1171.75 1357.67C1172.17 1359.31 1165.51 1364.03 1161.45 1365.3C1154.86 1367.37 1147.73 1367.77 1140.85 1368.88C1142 1380.58 1139.36 1387.63 1132.86 1389.86C1133.17 1386.26 1133.45 1382.77 1133.88 1377.61C1132.91 1379.49 1127.52 1379.63 1127.37 1379.71C1125.19 1380.83 1122.65 1381.65 1121.01 1383.33C1118.16 1386.19 1116 1389.74 1113.31 1392.79C1110.18 1396.32 1102.3 1396.05 1104.54 1403.98C1104.71 1404.61 1102.76 1406.41 1101.55 1406.75C1091.26 1409.56 1080.91 1412.19 1070.57 1414.8C1068.9 1415.23 1066.6 1414.53 1065.51 1415.45C1044.72 1432.71 1018.38 1434.26 993.788 1440.4C979.66 1443.92 964.99 1445.2 950.557 1447.49C945.452 1438.62 941.755 1448.96 937.464 1448.37C933.071 1447.76 927.22 1450.66 924.981 1442.87C924.269 1440.4 918.231 1439.43 914.771 1437.85C912.923 1442.84 911.634 1446.33 911.176 1447.52C905.427 1444.77 900.61 1442.46 895.471 1439.99C896.319 1445.11 896.777 1447.86 897.523 1452.34C892.978 1449.5 890.129 1447.72 886.838 1445.69C886.397 1447.49 886.007 1449.16 885.482 1451.34C872.236 1445.81 858.77 1446.42 844.913 1448.91C839.69 1449.86 833.906 1447.59 828.36 1446.91C820.915 1445.99 812.604 1442.43 809.433 1453.49C807.89 1450.27 806.38 1445.48 805.515 1445.6C800.156 1446.31 794.966 1448.13 789.471 1449.64C786.673 1442.01 771.154 1440.36 761.233 1449.33C762.182 1446.28 762.776 1444.36 763.403 1442.35C748.173 1439.99 733.401 1438.17 718.833 1435.32C700.261 1431.7 681.877 1427.07 663.34 1423.3C658.964 1422.42 654.232 1423.32 649.314 1423.4C649.212 1423.64 649.907 1422.06 650.653 1420.4C632.574 1414.46 614.291 1409.27 596.67 1402.39C584.068 1397.45 572.892 1388.33 560.053 1384.63C548.283 1381.26 540.125 1373.68 530.458 1367.72C516.245 1358.97 501.236 1351.49 487.244 1342.43C477.814 1336.33 469.419 1328.58 460.786 1321.3C450.729 1312.86 440.773 1304.29 431.021 1295.49C419.523 1285.09 407.905 1274.8 397.118 1263.69C390.199 1256.55 384.805 1247.95 378.513 1240.17C370.254 1229.97 361.367 1220.26 353.514 1209.76C347.222 1201.34 342.049 1192.08 336.435 1183.18C325.937 1166.53 314.116 1150.52 305.365 1133C295.443 1113.12 288.235 1091.88 279.925 1071.21C275.023 1059.02 269.342 1047.01 265.729 1034.44C262.744 1024.08 262.405 1012.97 260.59 1002.25C260.2 999.945 258.504 997.859 257.351 995.705C256.249 993.669 254.23 991.753 254.061 989.667C253.247 979.406 253.009 969.094 252.365 958.8C252.195 956.188 250.821 953.61 250.855 951.032C250.957 938.499 242.291 927.61 246.208 913.771C248.871 904.375 245.496 893.334 245.36 883.039C245.275 877.086 246.242 871.116 246.683 865.876C245.598 862.263 243.919 858.939 243.698 855.513C243.223 847.932 243.206 840.266 243.613 832.685C243.783 829.531 246.208 826.478 246.361 823.323C246.615 817.828 243.563 809.128 246.005 807.33C253.603 801.75 247.684 794.932 249.787 789.115C252.076 782.738 252.806 775.615 253.196 768.763C254.671 742.373 262.524 717.425 270.529 692.595C275.125 678.332 280.79 664.357 286.726 650.586C289.795 643.462 294.714 637.17 298.292 630.25C299.87 627.198 299.547 623.161 301.176 620.176C307.858 607.948 315.1 596.025 321.833 583.831C323.817 580.235 324.309 575.792 326.378 572.247C332.501 561.732 339.013 551.42 345.56 541.143C346.34 539.922 349.478 539.413 349.478 538.565C349.478 526.218 363.419 523.877 366.624 515.262C369.864 506.527 383.059 504.611 380.192 491.586C379.175 486.939 386.179 480.205 390.283 475.033C391.199 473.879 395.355 475.27 398.662 475.541C393.184 462.075 408.21 456.987 410.788 446.54C414.18 447.388 417.436 448.202 421.015 449.101C419.913 435.346 420.269 435.058 436.058 435.991C435.736 433.192 435.414 430.479 435.024 427.019C437.5 426.747 439.908 426.493 444.742 425.984C440.316 424.458 438.467 423.83 439.45 424.17C448.575 413.281 458.107 401.901 468.13 389.927C469.232 393.048 470.199 395.762 471.675 399.951C475.779 391.759 478.001 383.873 482.936 378.479C487.549 373.425 494.893 370.746 501.304 367.557C504.136 366.149 507.748 366.387 510.716 365.166C511.531 364.827 511.31 361.96 511.666 359.688C512.531 359.959 514.515 360.57 516.483 361.18C518.789 350.495 536.326 335.859 541.94 336.859C547.978 332.128 551.963 328.21 556.627 325.479C571.196 316.948 585.34 307.061 600.91 300.955C636 287.184 671.616 274.548 707.52 263.05C726.6 256.944 746.681 253.806 766.456 250.092C775.021 248.481 783.959 248.786 793.965 250.313C791.15 252.992 788.318 255.638 785.553 258.335C784.078 259.776 782.721 261.337 781.313 262.846C782.806 264.033 784.179 266.035 785.808 266.272C792.49 267.222 799.291 268.273 805.956 267.866C807.822 267.747 809.399 262.727 811.095 259.963C808.415 258.962 805.82 257.521 803.056 257.114C801.19 256.842 799.104 258.012 796.594 258.674C794.661 249.431 797.544 244.071 806.974 243.698C823.425 243.071 839.893 242.24 856.344 242.477C882.514 242.833 908.869 242.29 934.767 245.275C962.921 248.515 990.905 254.417 1018.48 261.099C1029.52 263.762 1039.34 271.547 1049.57 277.296C1049.82 277.432 1048.47 281.265 1047.26 282.927C1045.57 285.267 1043.31 287.201 1041.28 289.27C1036.09 283.164 1031.95 274.65 1021.55 281.129C1020.96 281.502 1019.7 281.027 1018.86 280.688C1013.9 278.687 1008.98 276.601 1004.05 274.548C1003.46 275.651 1002.88 276.736 1002.29 277.839C1004.78 279.467 1007.1 281.485 1009.8 282.638C1015.79 285.182 1022.7 286.234 1027.83 289.88C1033.36 293.815 1036.97 293.696 1041.12 288.981H1041.16ZM699.685 1362.28C695.377 1365.28 695.089 1368.21 699.888 1370.96C700.346 1371.23 701.177 1370.84 702.483 1370.67C702.517 1368.88 702.551 1367.01 702.602 1363.31C708.674 1365.99 714.084 1368.37 720.529 1371.22C720.868 1369.88 721.58 1367.06 722.292 1364.26C723.683 1369.45 725.125 1373.45 732.451 1373C735.962 1372.78 739.761 1377.41 743.238 1379.73C751.769 1376.71 760.385 1376.37 768.441 1383.14C778.939 1374.56 785.672 1384.5 793.033 1387.16C794.729 1384.73 797.408 1382.95 798.595 1383.65C804.65 1387.26 810.688 1390.31 817.998 1389.53C821.475 1389.16 825.019 1389.07 828.445 1388.41C838.536 1386.46 849.611 1391.69 858.956 1384.28C859.312 1384 859.974 1384.12 861.008 1384C860.652 1386.41 860.347 1388.57 859.567 1393.98C870.268 1392.13 880.97 1390.26 891.672 1388.41C931.765 1387.9 952.508 1384.78 964.108 1381.78C966.245 1381.22 972.368 1379.58 981.441 1377.42C1000.23 1372.98 1003.68 1373.06 1010.92 1370.83C1029.05 1365.23 1043.06 1353.71 1042.16 1351.9C1041.09 1349.71 1018.4 1361.89 976.15 1371.27C974.946 1371.54 967.11 1373.27 958.24 1374.81C939.194 1378.14 911.074 1381.36 874.797 1379.71C856.904 1378.61 842.488 1375.17 833.041 1377.46C826.715 1379 819.355 1375.78 812.621 1376.39C803.039 1377.25 793.931 1377.51 784.654 1374.01C778.566 1371.72 771.68 1371.62 765.252 1370.18C759.571 1368.91 754.008 1367.04 748.343 1365.62C746.851 1365.25 744.68 1364.81 743.713 1365.53C738.896 1369.25 735.47 1367.45 731.536 1363.86C728.602 1361.16 724.718 1361.9 722.53 1364.5C721.444 1365.21 720.359 1365.92 719.291 1366.65C718.171 1362.97 717.052 1359.31 715.627 1354.7C709.929 1357.51 705.078 1359.92 700.211 1362.31C693.443 1357.38 685.676 1347.49 680.113 1348.59C670.276 1350.56 671.073 1344.59 668.767 1339.59C665.917 1341.82 663.56 1343.69 661.66 1345.18C666.155 1355.02 674.092 1357.33 683.132 1354.93C684.506 1358.87 685.608 1362.01 686.643 1364.97C691.459 1363.99 695.564 1363.14 699.668 1362.31L699.685 1362.28ZM1225.56 394.235C1220.14 388.774 1214.71 383.313 1208.25 376.8C1209.33 376.207 1207.87 377.004 1206.4 377.801C1208.79 372.442 1208.26 368.592 1202.11 365.81C1195.26 362.707 1188.85 358.619 1182.43 354.634C1180.98 353.735 1180.43 351.428 1179.28 349.902C1177.36 347.375 1175.29 344.966 1173.29 342.507C1171.36 344.322 1168.1 345.916 1167.76 348.002C1167.22 351.292 1167.7 355.515 1169.46 358.229C1171.65 361.638 1175.26 364.436 1178.84 366.556C1181.79 368.303 1185.57 368.659 1188.98 369.643C1190.68 372.696 1193.2 375.596 1196.36 376.783C1199.45 377.954 1203.19 377.394 1206.65 377.58C1211.03 385.162 1215.42 392.76 1220.41 401.375C1222.8 397.949 1224.17 395.999 1225.53 394.049C1227.33 397.695 1228.55 401.816 1231.04 404.886C1235.89 410.822 1241.13 416.504 1246.83 421.609C1250.48 424.865 1255.06 427.29 1259.59 429.19C1260.74 429.682 1264.32 427.138 1264.93 425.34C1265.42 423.881 1263.64 420.676 1261.99 419.658C1257.58 416.911 1251.9 415.774 1248.19 412.399C1241.81 406.616 1236.55 399.611 1230.89 393.184C1229.45 393.438 1227.5 393.794 1225.56 394.201V394.235ZM547.452 1286.94C545.858 1284.06 544.721 1280.73 542.516 1278.44C540.38 1276.22 537.123 1275.07 534.359 1273.46C533.239 1276.71 530.628 1280.43 531.442 1283.09C532.188 1285.57 536.411 1287.79 539.481 1288.52C541.991 1289.11 545.06 1287.31 547.876 1286.59C547.842 1291.69 547.808 1296.81 547.757 1303.83C550.759 1299.36 552.404 1296.91 553.829 1294.81C558.696 1297.41 562.563 1299.44 565.26 1300.88C566.074 1304.33 566.701 1307.01 567.346 1309.67C573.791 1304.8 575.419 1312.53 579.404 1314.09C584.052 1315.93 589.14 1316.59 594.092 1317.71C593.837 1320.73 593.6 1323.73 593.346 1326.75C599.706 1312.59 607.829 1335.96 613.087 1324.22C611.985 1321.59 610.543 1318.15 608.881 1314.15C605.557 1317.2 602.284 1323.91 598.06 1315.4C596.619 1316.3 595.16 1317.18 593.719 1318.08C597.789 1307.18 584.035 1308.19 583.661 1304.29C578.166 1302.09 574.944 1301.05 571.959 1299.54C563.767 1295.44 555.66 1291.13 547.503 1286.94H547.452ZM446.048 1176.91C455.579 1177.28 452.968 1182.74 448.677 1189.86C453.663 1187.32 456.275 1186 459.972 1184.11C462.262 1191.25 464.297 1197.58 466.502 1204.48C468.961 1203.02 471.488 1201.53 473.761 1200.19C479.781 1208.37 485.616 1216.3 492.484 1225.67C494.604 1226.31 500.88 1226.46 504.645 1229.62C529.372 1250.27 554.287 1270.61 582.44 1286.57C591.599 1291.76 600.621 1297.37 610.272 1301.53C617.157 1304.5 624.671 1305.56 619.684 1317.13C628.012 1308.48 634.982 1313.52 642.326 1316.5C656.996 1322.47 671.972 1327.73 686.575 1333.84C694.156 1337.01 701.228 1341.37 708.894 1345.39C711.913 1341.16 721.326 1343.1 725.634 1348.42C730.654 1349.56 732.672 1349.68 734.368 1350.49C736.149 1351.34 737.556 1353.75 739.252 1353.9C746.443 1354.53 753.77 1354.05 760.893 1355.05C764.336 1355.54 767.44 1358.41 769.628 1359.62C773.054 1359.7 775.988 1359.55 778.837 1359.97C780.126 1360.16 781.33 1362.31 782.416 1362.19C788.097 1361.57 793.745 1360.48 799.393 1359.55C799.003 1360.65 798.612 1361.75 798.205 1362.85C801.801 1365.01 805.379 1367.16 807.499 1368.43C820.219 1358.65 830.921 1362.67 842.217 1369.96C841.708 1367.77 841.301 1366.04 840.419 1362.31C852.766 1368.94 864.672 1363.35 877.12 1367.42C887.839 1370.93 901.661 1364.84 914.127 1363.11C926.406 1361.41 938.702 1358.67 951.015 1358.63C962.005 1358.6 971.299 1351.98 983.544 1354.51C992.55 1356.38 1003.56 1349.32 1013.51 1345.74C1022.33 1342.57 1030.74 1338.18 1039.65 1335.36C1047.59 1332.84 1055.66 1333.07 1063.68 1327.93C1074.55 1320.98 1088.37 1318.72 1100.59 1313.65C1105.44 1311.64 1108.95 1306.04 1113.83 1304.58C1122.79 1301.92 1130.6 1298.49 1137.35 1291.66C1140.2 1288.77 1145.89 1288.77 1150.21 1287.25C1151.75 1286.7 1153.3 1285.75 1154.43 1284.58C1159.84 1279.06 1165.03 1273.31 1170.49 1267.83C1171.24 1267.08 1173.12 1266.93 1174.31 1267.2C1182.25 1269.08 1182.23 1269.13 1181.77 1261.77C1184.45 1261.99 1188.51 1263.52 1189.83 1262.23C1196.32 1255.97 1203.77 1249.8 1207.67 1242C1212.37 1232.58 1218.69 1225.77 1224.85 1221.48C1228.53 1222.8 1230.57 1223.55 1232.06 1224.07C1232.52 1218.63 1232.84 1214.73 1233.26 1209.54C1237.2 1212.4 1239.3 1213.95 1241.91 1215.85C1242.2 1212.33 1242.42 1209.74 1242.52 1208.5C1255.57 1210.44 1251.75 1200.58 1252.46 1193.64C1255.23 1195.83 1256.92 1197.17 1258.62 1198.51C1262.06 1193.92 1268.12 1189.25 1267.47 1185.81C1266.73 1181.81 1264.55 1182.32 1269.78 1179.79C1275.07 1177.23 1278.29 1169.83 1281.7 1164.12C1286.45 1156.11 1290.1 1147.45 1294.98 1139.54C1300.82 1130.1 1309.13 1121.87 1313.38 1111.85C1322.02 1091.51 1328.85 1070.41 1336.04 1049.48C1344.16 1025.83 1353.36 1002.39 1359.23 978.168C1363.75 959.495 1362.72 939.533 1366.2 920.521C1370.3 898.1 1367.55 876.069 1365.89 853.902C1363.99 828.326 1361.8 802.751 1359.24 777.243C1358.77 772.477 1355.22 768.067 1354.24 763.268C1350.73 746.155 1348.52 728.737 1344.27 711.828C1340.38 696.378 1335.46 681.012 1329.21 666.358C1321.88 649.178 1312.81 632.727 1304.12 616.14C1296.46 601.503 1289.18 586.545 1280.07 572.824C1270.64 558.628 1259.11 545.824 1248.71 532.256C1242.91 524.674 1238.78 515.33 1231.72 509.292C1215.4 495.351 1201.29 479.239 1185.94 464.399C1173.26 452.137 1159.84 440.858 1145.46 431.327C1122.36 416.012 1100.35 398.763 1073.89 388.621C1053.95 380.972 1035.22 370.254 1014.8 363.47C1009.75 361.791 1005.86 356.584 1000.79 354.854C993.805 352.48 986.122 352.208 978.88 350.461C961.954 346.374 945.215 341.439 928.204 337.792C901.526 332.06 874.475 329.601 847.118 330.398C840.114 330.601 833.058 329.346 824.951 328.685C822.628 333.722 819.812 334.163 812.791 329.363C810.824 328.023 807.126 327.803 804.803 328.668C801.173 330.025 798.273 334.01 794.678 334.655C761.775 340.523 728.652 346.323 697.785 359.111C664.289 372.984 631.997 389.809 599.315 405.581C592.531 408.855 586.375 413.417 579.676 416.86C578.065 417.691 575.402 416.436 573.214 416.131C574.215 414.027 575.046 411.823 576.267 409.855C576.827 408.939 578.149 408.499 579.116 407.837C578.726 407.006 578.319 406.158 577.929 405.327C572.298 407.6 566.667 409.889 560.087 412.552C563.496 414.875 565.412 416.181 569.211 418.776C564.955 418.217 563.191 417.979 559.035 417.419C563.445 420.472 565.819 422.134 570.483 425.357C564.768 426.357 560.986 426.629 557.492 427.765C555.321 428.46 553.354 430.258 551.692 431.954C548.3 435.397 545.569 439.637 541.804 442.571C538.446 445.183 533.307 445.692 530.339 448.558C525.93 452.815 522.741 458.327 518.654 463.805C517.399 458.547 516.636 455.376 515.872 452.221C514.346 461.21 514.532 461.363 504.831 472.506C493.383 485.65 481.817 498.709 469.707 511.242C466.705 514.346 461.414 515.262 456.919 517.297C453.137 523.979 448.762 531.713 444.182 539.803C443.453 538.259 442.809 536.903 441.35 533.85C436.533 550.691 432.65 566.854 414.468 573.35C422.151 580.778 414.892 584.849 410.585 588.953C407.311 592.074 402.8 593.871 398.323 596.585C401.291 598.196 403.207 599.248 407.277 601.469C401.952 604.336 398.458 606.218 394.947 608.101C392.319 619.43 388.045 630.742 382.38 641.325C379.972 645.82 374.663 648.771 370.101 652.96C370.83 654.792 372.34 658.489 373.934 662.441C364.64 662.746 365.556 662.661 366.387 671.531C366.947 677.467 365.335 683.997 363.198 689.712C355.058 711.421 342.931 731.841 342.422 755.958C342.371 758.417 341.897 760.944 341.218 763.319C338.64 772.443 335.842 781.5 333.213 790.607C328.295 807.686 336.266 826.325 326.921 842.878C332.365 851.409 327.939 860.059 327.803 868.776C327.515 888.433 328.278 908.293 330.957 927.729C333.417 945.588 338.708 963.108 343.236 980.644C347.833 998.401 352.734 1016.11 358.093 1033.64C360.637 1041.94 365.437 1049.13 370.254 1056.56C383.567 1077.06 394.507 1099.09 407.057 1120.12C410.127 1125.26 413.298 1128.91 407.345 1133.62C407.21 1133.73 407.769 1134.71 408.363 1136.1C410.602 1135.01 412.772 1133.96 415.283 1132.72C416.3 1134.93 417.318 1137.13 418.471 1139.61C416.979 1139.8 415.995 1139.95 414.977 1140.02C413.62 1140.12 412.247 1140.17 410.279 1140.27C411.619 1142.24 412.467 1143.85 413.705 1145.05C414.011 1145.34 415.69 1144.44 416.588 1143.85C422.626 1139.9 424.356 1143.63 425.849 1148.7C426.832 1152.04 428.24 1157.76 430.038 1157.99C442.011 1159.57 439.569 1165.85 435.55 1173.65C438.28 1174.87 441.113 1176.13 443.945 1177.4C444.64 1177.3 445.319 1177.14 445.997 1176.94L446.048 1176.91ZM1355.46 651.756L1349.78 652.468C1349.63 656.589 1348.24 661.152 1349.52 664.747C1354.39 678.349 1360.14 691.629 1365.6 705.146C1365.94 704.959 1369.38 703.535 1369.27 703.043C1364.87 685.896 1360.14 668.835 1355.48 651.756H1355.46ZM476.372 1214.74C475.694 1214.27 474.999 1213.81 474.32 1213.34C472.845 1216.35 470.945 1219.24 469.962 1222.41C467.231 1231.28 473.879 1234.31 479.832 1238.13C487.515 1243.05 494.774 1248.6 502.983 1254.4C501.931 1246.17 501.236 1240.66 500.574 1235.43C497.674 1237.54 494.299 1239.96 490.653 1242.59C488.77 1237.74 486.905 1232.91 484.988 1228.01C481.969 1229.46 479.866 1230.46 475.813 1232.43C476.033 1225.51 476.203 1220.12 476.372 1214.74ZM332.145 1139.36C339.2 1151.11 345.814 1162.13 352.463 1173.21C355.058 1171.55 357.313 1170.1 359.586 1168.66C358.263 1165.66 357.025 1162.81 355.77 1159.96C355.058 1160.83 354.362 1161.68 353.65 1162.54C351.818 1161.23 349.071 1160.3 348.375 1158.55C346.968 1155.03 346.442 1151.09 345.984 1147.28C345 1138.98 341.439 1135.15 332.145 1139.37V1139.36ZM275.685 900.474C261.93 907.241 268.053 916.518 268.562 923.726C269.138 931.867 272.14 939.821 274.209 948.403C279.874 948.488 279.636 948.556 277.957 941.958C275.956 934.004 274.413 925.948 272.445 916.925C272.564 916.807 274.057 915.331 276.38 913.025C273.582 913.364 272.259 913.533 270.834 913.703C272.14 910.141 273.378 906.732 275.668 900.457L275.685 900.474ZM1385.04 757.315C1383.02 757.722 1381.02 758.112 1379 758.519C1380.93 768.169 1382.87 777.803 1385.11 788.996C1387.68 786.52 1390.84 784.739 1390.62 783.518C1389.14 774.716 1386.97 766.032 1385.04 757.315ZM387.417 1224.16C396.762 1211.4 384.144 1207.99 382.702 1200.77C382.651 1200.48 380.498 1200.11 379.938 1200.53C379.056 1201.21 377.954 1202.87 378.242 1203.57C380.939 1210.05 383.907 1216.41 387.417 1224.14V1224.16ZM291.966 1046.86C293.544 1043.02 295.104 1040.97 295.07 1038.94C294.951 1032.47 294.409 1026 293.679 1019.57C293.459 1017.67 292.102 1015.9 291.271 1014.07C289.694 1016.12 286.573 1018.36 286.794 1020.18C287.845 1028.39 289.846 1036.49 291.966 1046.86ZM1271.19 517.348C1265.23 511.191 1257.7 503.729 1256.67 504.594C1255.02 505.934 1272.78 525.183 1291.22 557.407C1318.3 604.726 1331.85 628.402 1333.9 633.982C1334.6 635.881 1336.63 641.715 1342.16 645.175C1346.64 647.974 1351.64 648.109 1355.12 647.787C1338.38 618.209 1319.57 587.579 1298.47 556.305C1289.4 542.856 1280.29 529.881 1271.19 517.365V517.348ZM274.871 958.41C277.94 966.025 273.09 976.065 282.621 984.07C281.858 974.318 281.349 967.805 280.807 960.852C279.314 960.241 277.092 959.325 274.871 958.41ZM266.543 891.282C272.937 885.77 273.378 877.951 266.747 864.536C266.679 873.321 266.611 882.09 266.543 891.282ZM1377.73 727.906C1367.16 734.979 1379.24 742.271 1376.05 751.837C1389.94 742.865 1372.86 735.318 1377.73 727.906ZM643.412 1334.16C647.211 1348.74 650.959 1351.25 660.372 1344.89C654.775 1341.35 649.772 1338.18 643.412 1334.16ZM763.607 1403.59C776.819 1403.52 779.787 1401.54 785.384 1404.25C788.725 1405.87 788.47 1406.97 793.965 1410.19C793.965 1410.19 799.274 1413.31 805.854 1415.46C816.251 1418.89 828.292 1418.79 840.843 1418.11C860.55 1417.03 859.855 1415.69 871.863 1415.46C888.653 1415.16 891.842 1417.75 905.528 1418.11C930.307 1418.74 952.016 1411.02 951.727 1408.87C951.422 1406.59 926.542 1409.56 871.218 1409.49C862.518 1409.49 845.507 1409.39 823.679 1406.9C818.269 1406.29 812.452 1405.61 804.531 1404.25C779.227 1399.91 775.581 1395.84 757.671 1394.35C750.616 1393.76 752.023 1394.47 733.249 1393.69C728.822 1393.5 720.427 1393.13 709.488 1392.37C673.939 1389.91 656.25 1386.56 656.03 1387.75C655.538 1390.23 732.468 1407 732.689 1406.07C732.74 1405.87 729.212 1405.05 729.297 1404.25C729.45 1402.76 741.915 1402.88 747.122 1402.93C757.315 1403.03 756.382 1403.63 763.624 1403.59H763.607Z" fill="white"/>
    </mask>
    <g mask="url(#mask0_3596_37645)">
    <path d="M1331.5 1154.5L1199.5 1288L1110.5 1350L1037 1388.5L916 1407.5H788.5L695 1388.5L597 1350L490.5 1288L403 1202L342.5 1102.5L298 993.5L286.5 859.5L305.5 716L367 583.5L465 453L621.5 345L762.5 293.5H943.5L1110.5 345L1277 483L1341.5 596.5L1392 716L1409 859.5L1392 1012L1331.5 1154.5Z" stroke="white" stroke-width="107"/>
    </g>
    <mask id="mask1_3596_37645" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="562" y="872" width="570" height="284">
    <path d="M637.119 1082.81C640.426 1078.86 641.41 1077.66 642.411 1076.47C640.189 1075.03 637.357 1071.87 635.847 1072.41C624.45 1076.5 623.348 1063.15 615.784 1061.12C616.988 1059.36 618.192 1057.59 620.261 1054.57C616.869 1053.84 613.596 1053.86 611.137 1052.44C607.321 1050.23 603.742 1047.38 600.672 1044.21C595.381 1038.77 590.564 1032.86 585.561 1027.13C579.879 1020.6 574.452 1013.85 568.499 1007.56C561.071 999.724 561.122 990.837 564.056 980.339C566.905 984.053 569.381 987.292 572.264 991.057C573.689 988.903 575.164 986.665 577.166 983.629C580.965 990.159 584.204 995.738 587.443 1001.3C586.595 986.19 584.442 971.706 593.668 958.528C599.349 961.547 605.031 964.566 610.73 967.585C611.272 966.635 611.832 965.668 612.375 964.719C615.003 968.094 617.615 971.486 620.244 974.861C621.041 975.844 621.838 976.828 622.635 977.812C618.701 978.524 614.749 979.236 610.814 979.932C611.628 981.288 612.442 982.662 613.257 984.019C617.734 986.071 622.194 988.106 628.164 990.854C628.266 992.414 628.538 996.722 628.809 1001.03C629.572 1000.33 630.352 999.622 631.115 998.927C635.389 1001.03 640.223 1002.42 643.818 1005.35C655.199 1014.63 666.324 1024.25 677.043 1034.27C679.485 1036.56 679.875 1041.04 680.113 1041.65C691.815 1047.03 701.873 1051.59 711.845 1056.3C714.084 1057.35 716.238 1058.76 718.137 1060.34C721.699 1063.31 725.057 1066.55 729.314 1070.41C735.504 1067.31 736.369 1068.26 741.237 1076.76C742.695 1079.32 749.852 1081.35 752.413 1079.96C757.773 1077.06 762.03 1081.9 763.794 1081.47C772.647 1079.35 776.904 1094.24 786.198 1086.76C786.808 1086.27 788.301 1086.76 789.352 1086.98C801.818 1089.63 814.165 1093.44 826.783 1094.67C839.571 1095.9 852.647 1095.02 865.537 1094.19C873.304 1093.7 880.987 1091.58 888.687 1090.09C901.407 1087.61 914.602 1086.42 926.694 1082.1C938.448 1077.91 949.421 1071.07 960.038 1064.31C972.147 1056.57 983.205 1047.23 995.264 1039.43C999.707 1036.54 1005.69 1036.07 1008.75 1032.98C1011.21 1029.35 1013.5 1025.6 1016.12 1022.13C1026 1009.07 1035.88 996.044 1045.96 983.154C1048.59 979.796 1051.94 976.998 1054.98 973.962C1055.49 973.453 1056.49 973.165 1056.62 972.622C1061.61 950.93 1066.67 929.238 1071.31 907.462C1072.02 904.137 1070.77 900.423 1070.6 896.896C1070.55 895.963 1071.19 895.013 1071.58 893.911C1085.24 899.287 1079.39 911.091 1081.93 920.758C1084.71 920.097 1088.51 919.181 1095.48 917.519C1092.51 914.432 1090.73 912.55 1089.29 911.04C1089.36 908.31 1089.44 904.697 1089.58 898.388C1093.16 904.426 1095.9 909.039 1099.87 915.738C1102.64 900.304 1105.01 886.991 1107.39 873.694C1108.45 873.372 1109.51 873.05 1110.57 872.728C1114.76 879.223 1118.94 885.719 1123.48 892.757C1124.19 890.569 1124.77 888.806 1125.35 887.059C1125.87 887.008 1126.42 886.957 1126.94 886.906C1128.54 903.68 1131.94 920.521 1131.2 937.176C1130.5 952.473 1126.97 968.161 1121.8 982.645C1111.34 1011.97 1093.67 1036.53 1071.7 1059.2C1053.79 1077.69 1034.88 1094.09 1012.77 1106.3C989.345 1119.24 964.854 1130.45 940.144 1140.8C927.084 1146.26 912.77 1149.51 898.693 1151.57C882.768 1153.87 866.486 1153.57 850.374 1154.67C824.392 1156.47 798.969 1152.77 774.529 1144.55C753.16 1137.37 732.231 1128.64 711.692 1119.31C686.965 1108.08 662.848 1095.48 637.136 1082.83L637.119 1082.81ZM1062.8 987.258C1068.45 969.874 1074.47 962.666 1079.11 959.376C1080.5 958.392 1084.95 955.509 1084.95 951.642C1084.95 948.556 1081.62 947.267 1082.15 944.468C1082.9 940.398 1088.42 938.447 1090.12 936.141C1087.53 936.548 1086.02 935.734 1085.49 935.395C1082.51 933.478 1081.42 928.322 1083.73 923.048C1079.54 928.424 1074.57 935.87 1070.33 945.384C1066.41 954.186 1064.27 962.242 1063.05 968.619C1054.18 984.392 1045.31 1000.15 1036.43 1015.92L1062.8 987.258Z" fill="white"/>
    </mask>
    <g mask="url(#mask1_3596_37645)">
    <path d="M572 977.06L673.187 1073.69L787.662 1122H920.023L1030.92 1052.45L1084.58 995.642L1104 873" stroke="white" stroke-width="97"/>
    </g>
    <mask id="mask2_3596_37645" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="673" y="631" width="102" height="187">
    <path d="M720.936 634.473C723.751 639.375 725.243 642.004 726.753 644.615C727.77 644.005 728.788 643.411 729.806 642.801C728.839 640.494 727.855 638.188 726.617 635.254C729.823 634.134 732.604 633.167 736.454 631.845C737.065 637.628 737.556 642.411 738.065 647.176C738.235 648.703 737.862 650.992 738.71 651.62C745.884 656.945 747.698 666.239 752.82 672.074C766.558 687.745 766.541 707.028 770.883 725.175C772.409 731.535 771.765 738.404 772.155 745.918C769.051 744.849 766.643 744.035 764.234 743.204L763.268 744.459C765.863 747.105 770.17 749.428 770.73 752.447C772.935 764.319 774.394 776.395 774.885 788.436C774.953 790.115 768.135 792.1 764.15 794.118C763.03 792.71 761.64 790.98 759.35 788.148C759.045 791.811 758.892 793.897 758.706 795.966C757.383 810.213 749.123 815.386 734.961 812.163C730.654 811.18 724.921 812.35 720.986 814.572C708.165 821.814 699.125 817.302 696.344 802.767C693.002 785.214 687.982 767.966 684.421 750.446C682.826 742.661 683.624 734.385 682.216 726.549C680.045 714.474 675.262 702.653 674.703 690.577C674.228 680.248 670.259 668.885 682.301 659.371C689.203 653.926 690.611 641.529 694.783 631.573C698.938 635.627 703.501 640.07 706.655 643.157C711.981 639.901 716.916 636.899 720.919 634.456L720.936 634.473Z" fill="white"/>
    </mask>
    <g mask="url(#mask2_3596_37645)">
    <path d="M708 626L736 818" stroke="white" stroke-width="97"/>
    </g>
    <mask id="mask3_3596_37645" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="931" y="605" width="98" height="189">
    <path d="M1026 781.449C1003.47 767.168 1018.58 791.031 1012.17 793.558C1008.54 790.709 1004.69 787.69 999.996 783.993C1000.03 787.487 1000.05 789.318 1000.06 791.167C999.47 791.252 998.859 791.32 998.266 791.404C997.367 785.977 996.468 780.567 995.366 773.952C992.448 780.346 989.955 785.824 987.191 791.879C973.555 785.197 965.211 775.258 957.324 762.708C948.352 748.428 944.486 735.114 945.978 722.699C944.129 710.403 942.925 701.177 941.331 692.019C939.889 683.759 941.331 674.38 932.834 668.614C932.054 668.071 931.104 666.256 931.375 665.917C939.771 655.131 926.186 637.933 942.467 628.894C945.418 627.248 945.062 619.684 946.165 615.156C950.557 612.51 955.34 609.627 961.395 605.998C963.158 608.355 965.38 611.323 967.348 613.952C970.265 612.391 973.453 610.712 974.827 609.983C983.833 612.646 991.566 615.936 999.606 617.055C1010.34 618.548 1008.22 628.317 1009.39 633.439C1015.62 660.778 1020.65 688.457 1024.71 716.221C1027.35 734.351 1027.79 752.837 1028.78 771.171C1028.96 774.461 1027.05 777.87 1026.03 781.466L1026 781.449Z" fill="white"/>
    </mask>
    <g mask="url(#mask3_3596_37645)">
    <path d="M967 606L997 803" stroke="white" stroke-width="97"/>
    </g>
    </svg>`;

    const containerTransition = document.querySelector(".transition-text");
    const clientReact = containerTransition.getBoundingClientRect();
    const width = clientReact.width;
    const height = clientReact.height;

    containerTransition.innerHTML = transitionElement;
    const titles = document.querySelectorAll(".title-101 h2");
    const split = new SplitText(titles, { type: "chars" });
    const highlightedLetters = document.querySelectorAll('.highlight');

    // Vérifier si les lettres sont bien sélectionnées
    console.log("Lettres highlight trouvées :", highlightedLetters);

    const letters = document.querySelectorAll('.split-char');
    const rows = 10; 
    const cols = 10; 
    let matrix = [];
    let index = 0;  

    for (let i = 0; i < rows; i++) {
      matrix[i] = [];
      for (let j = 0; j < cols; j++) {
          if (letters[index]) {
              matrix[i][j] = letters[index];
              index++;
          }
      }
    }

    let diagonalOrder = [];
    for (let line = 0; line < rows + cols - 1; line++) {
      for (let i = 0; i <= line; i++) {
          let j = line - i;
          if (i < rows && j < cols && matrix[i][j]) {
              diagonalOrder.push(matrix[i][j]);
          }
      }
    }


    const svgElement = containerTransition.querySelector("#transitionElement");
    const pathElement = svgElement.querySelectorAll("path");

    gsap.set(
      [menteurText.chars, lastChanceText.chars, nextStepCuriousText.chars],
      {
        opacity: 0,
        x: 0,
        y: 20,
      }
    );

    buttonPetitPeu.addEventListener("click", function () {
      const tl = prepareAnimationHandler.constructTransition(true);
      tl.play();

      tl.eventCallback("onComplete", () => {
        window.location.href = "/les-mauvaises";
      });
    });

    buttonNegative.addEventListener("click", function () {
      const tlButton = gsap.timeline();
      switch (prepareAnimationHandler.currentStepButton) {
        case 0:
          prepareAnimationHandler.currentStepButton = 1;

          tlButton
            .to(menteurText.chars, {
              opacity: 1,
              x: 0,
              y: 0,
              stagger: 0.05,
              ease: "power2.out",
              duration: 0.5,
            })
            .to(lastChanceText.chars, {
              opacity: 1,
              x: 0,
              y: 0,
              stagger: 0.05,
              ease: "power2.out",
              duration: 0.5,
            });
          break;
        case 1:
          prepareAnimationHandler.currentStepButton = 2;

          tlButton.to(nextStepCuriousText.chars, {
            opacity: 1,
            x: 0,
            y: 0,
            stagger: 0.05,
            ease: "power2.out",
            duration: 0.5,
            onComplete: () => {
              const scrollTrigger = ScrollTrigger.getById("mainScrollTrigger");
              utilsHandler.blockScroll();
              utilsHandler.scrollToEndOfAnimation(
                tl,
                scrollTrigger,
                "containerFooter",
                ".footer",
                10,
                0
              );
            },
          });
          break;

        default:
          break;
      }
    });

    tl.set([svgElement, container], {
      position: "absolute",
      width: "100%",
      height: "100%",
      zIndex: 1,
    }).set(pathElement, {
      stroke: "rgba(0, 0, 0, 0)",
    });

    const durationDefault = 8;
    const durationShort = 4;
    const staggerTime = "-=3";

    tl.to(containerFirstSection, {
      padding: "100px 0 0 0",
      duration: 3,
    })
      .to(firstTransitionBlocs, {
        zIndex: 10,
        duration: 0,
      })
      .to(firstTransitionBlocsDivs, {
        height: "100%",
        duration: durationShort,
        stagger: {
          each: durationShort - 1,
          from: "start",
        },
      })
      .set(container, {
        position: "fixed",
        top: 0,
        zIndex: 10,
      })
      .from(
        ".paper-left",
        {
          x: "-100%",
          duration: durationDefault,
        },
        "sync"
      )
      .from(
        ".paper-right",
        {
          x: "100%",
          duration: durationDefault,
        },
        "sync+=0.3"
      )
      .from(
        [".main-line-svg path", ".second-line-svg path"],
        {
          drawSVG: "0%",
          duration: durationDefault,
        },
        "sync+=0.3"
      )
      .from(
        ".boom",
        {
          y: "70",
          duration: durationDefault,
        },
        "sync+=0.7"
      )
      .from(
        ".boom path",
        {
          drawSVG: "0%",
          duration: durationDefault,
        },
        "sync+=0.7"
      )
      .from(".visage", {
        x: "10vw",
        opacity: 0,
        duration: durationDefault,
      })
      .from(
        tvElement,
        {
          y: "100%",
          opacity: 0,
        },
        "sync+=0.7"
      )
      .from(
        splitTitle.chars,
        {
          opacity: 0,
          color: "black",
          y: 200,
          x: -100,
          stagger: 1.5,
          ease: "power2.out",
          duration: 3,
        },
        "-=0.2"
      )
      .set(
        pathElement,
        {
          drawSVG: "0% 0%",
        },
        "-=3"
      )
      .to(
        pathElement,
        {
          duration: 3,
          drawSVG: "100%",
          ease: "none",
          stroke: "#000000",
        },
        "-=3"
      )
      .from(
        ".svg-intero",
        {
          opacity: 0,
          duration: 1,
        },
        "+=1"
      );

    tl.fromTo(
      ".tv-element",
      {
        y: "100vh",
      },
      {
        y: "-10vh",
        scale: 2,
        duration: 10,
        onComplete: () => {
          const scrollTrigger = ScrollTrigger.getById("mainScrollTrigger");
          videoTvElement.play();

          utilsHandler.blockScroll();
          utilsHandler.scaleCursor();

          document.addEventListener(
            "click",
            (event) => {
              if (!prepareAnimationHandler.hasClickedFirstAnimation) {
                prepareAnimationHandler.hasClickedFirstAnimation = true;

                utilsHandler.scrollToEndOfAnimation(
                  tl,
                  scrollTrigger,
                  "secondAnimation",
                  ".tv-element",
                  2,
                  50
                );
              }
            },
            {once: true}
          );

          videoTvElementTeam.onended = () => {
            if (!prepareAnimationHandler.hasClickedFirstAnimation) {
              utilsHandler.scrollToEndOfAnimation(
                tl,
                scrollTrigger,
                "secondAnimation",
                ".tv-element",
                2,
                50
              );
            }
          };
        },
        onReverseComplete: () => {
          videoTvElement.pause();
          prepareAnimationHandler.hasClickedFirstAnimation = false;
        },
        onLeave: () => {
          videoTvElement.pause();
          prepareAnimationHandler.hasClickedFirstAnimation = false;
        },
      }
    )
      .addLabel("secondAnimation")
      .to(
        ".tv-element",
        {
          y: "40vh",
          scale: 6,
          duration: 20,
          delay: 10,
        },
        "secondAnimation"
      )
      .to(
        ".menu",
        {
          background: "transparent",
        },
        "-=2.7"
      )
      .to(".video-tv-2, .video-tv-2 video", {
        position: "fixed",
        zIndex: 100,
        opacity: 1,
        width: "100vw",
        height: "100vh",
        top: 0,
        left: 0,
        duration: 1,
        onComplete: () => {
          const scrollTrigger = ScrollTrigger.getById("mainScrollTrigger");
          videoTvElementTeam.play();

          document.addEventListener(
            "click",
            (event) => {
              if (!prepareAnimationHandler.hasClickedSecondAnimation) {
                prepareAnimationHandler.hasClickedSecondAnimation = true;

                utilsHandler.scrollToEndOfAnimation(
                  tl,
                  scrollTrigger,
                  "containerCurious",
                  ".container-curious",
                  3,
                  300
                );
                utilsHandler.unScaleCursor();
              }
            },
            {once: true}
          );

          videoTvElementTeam.onended = () => {
            if (!prepareAnimationHandler.hasClickedSecondAnimation) {
              utilsHandler.unScaleCursor();

              utilsHandler.scrollToEndOfAnimation(
                tl,
                scrollTrigger,
                "containerCurious",
                ".container-curious",
                3,
                300
              );
            }
          };
        },
        onReverseComplete: () => {
          videoTvElementTeam.pause();
          prepareAnimationHandler.hasClickedSecondAnimation = false;
        },
        onLeave: () => {
          videoTvElementTeam.pause();
          prepareAnimationHandler.hasClickedSecondAnimation = false;
        },
      })
      .to(
        ".container-curious",
        {
          position: "fixed",
          zIndex: 200,
          opacity: 1,
          width: "100vw",
          height: "100vh",
          top: 0,
          left: 0,
          duration: 1,
          delay: 10,
        },
        "container-curious"
      )
      .from(splitTextCurious.chars, {
        opacity: 0,
        color: "white",
        x: -20,
        y: 20,
        stagger: 1,
        ease: "power2.out",
        duration: 3,
      })
      .from(".morph-button", {
        opacity: 0,
        x: 0,
        y: 20,
        stagger: 1,
        ease: "power2.out",
        duration: 3,
      })
      .from(splitTextCurious2.chars, {
        opacity: 0,
        color: "black",
        x: 0,
        y: 20,
        stagger: 1,
        ease: "power2.out",
        duration: 3,
      })

      .to(
        ".container-services",
        {
          position: "fixed",
          zIndex: 200,
          opacity: 1,
          width: "100vw",
          height: "100vh",
          top: 0,
          left: 0,
          duration: 1,
          delay: 10,
          onEnter: () => {
            letterSource.getLetters("1,0,1").then((letters) => {
              const container = document.querySelector(".text-101");
              const svgHTML = letters
                .map((svg) =>
                  svg !== "*" ? "<span>" + svg + "</span>" : '<b class="space"></b>'
                )
                .join("");
              container.innerHTML +=
                '<div class="lm-typo index z-9">' + svgHTML + "</div>";
              const tlLetterSourceAnime = prepareAnimationHandler.animeLetterSource(
                container,
                400,
                0.5,
                currentColor,
                1.5
              );
              tlLetterSourceAnime.play();
            });

            letterSource.getLetters("P,R,E,S,T,A,S").then((letters) => {
              const container = document.querySelector(".text-presta");
              const svgHTML = letters
                .map((svg) =>
                  svg !== "*" ? "<span>" + svg + "</span>" : '<b class="space"></b>'
                )
                .join("");
              container.innerHTML +=
                '<div class="lm-typo index z-9">' + svgHTML + "</div>";
              const tlLetterSourceAnime = prepareAnimationHandler.animeLetterSource(
                container,
                110,
                0.5,
                currentColor,
                1.5
              );
              tlLetterSourceAnime.play();
            })
          }
        }).from(split.chars, {
          opacity: 0,
          y: 40,
          x: -20,
          stagger: 0.5,
          ease: "power2.out",
          duration: 10,
          delay: 3,
        }, "sync-service")
        .from(diagonalOrder, {
          y: 40,
          x: -20,
          stagger: 0.1,
          opacity: 0,
          ease: "power2.out",
          duration: 0.8,
          onComplete: () => {
            const highlightedLetters = document.querySelectorAll('.highlight p');
            
            console.log("Lettres trouvées :", highlightedLetters);
        
            gsap.to(highlightedLetters, {
              color: "#C62369",          
              fontFamily: "'Made SOULMAZE', sans-serif", 
              duration: 1,              
              ease: "power2.inOut",     
              stagger: 0.1,             
            });
          }
        });
      // .addLabel("containerFooter")
      // .to(
      //   "footer",
      //   {
      //     position: "fixed",
      //     bottom: "-" + document.querySelector("footer").offsetHeight + "px",
      //     width: "100%",
      //     zIndex: 500,
      //     left: 0,
      //   },
      //   "containerFooter"
      // )
      // .to("footer", {
      //   bottom: 0,
      //   duration: 5,
      // });
    
    return tl;
  }

  static removeLetter() {
    const container = document.querySelector(".container-curious");
    const containerLetter = container.querySelectorAll(".lm-typo");
    containerLetter.forEach((container) => {
      container.remove();
    });
  }

  static loadLetter() {
    letterSource.getLetters("L,A,*,C,U,R,I,O,S,I,T,E").then((letters) => {
      const container = document.querySelector(".curious-1");
      const svgHTML = letters
        .map((svg) =>
          svg !== "*" ? "<span>" + svg + "</span>" : '<b class="space"></b>'
        )
        .join("");
      container.innerHTML +=
        '<div class="lm-typo index z-9">' + svgHTML + "</div>";
      const tlLetterSourceAnime = prepareAnimationHandler.animeLetterSource(
        container,
        100,
        0.3,
        "#FFFFFF",
        1.5
      );
      tlLetterSourceAnime.play();
    });

    letterSource
      .getLetters("E,S,T,*,*,*,U,N,*,*,*,V,I,L,A,I,N,*,*,*,D,E,F,A,U,T")
      .then((letters) => {
        const container = document.querySelector(".curious-2");
        const svgHTML = letters
          .map((svg) =>
            svg !== "*" ? "<span>" + svg + "</span>" : '<b class="space"></b>'
          )
          .join("");

        container.innerHTML +=
          '<div class="lm-typo index z-9">' + svgHTML + "</div>";
        const tlLetterSourceAnime = prepareAnimationHandler.animeLetterSource(
          container,
          100,
          0.3,
          "#FFFFFF",
          1.5
        );
        tlLetterSourceAnime.play();
      });

    letterSource
      .getLetters(
        "N,E,*,*,*,S,E,R,A,I,S,*,TIRET,*,T,U,*,*,*,P,A,S,*,*,*,C,U,R,I,E,U,X,*,*,*,Q,U,A,N,D,*,*,*,M,E,M,E,*,*,*,INTE"
      )
      .then((letters) => {
        const container = document.querySelector(".curious-3");
        const svgHTML = letters
          .map((svg) =>
            svg !== "*" ? "<span>" + svg + "</span>" : '<b class="space"></b>'
          )
          .join("");

        container.innerHTML +=
          '<div class="lm-typo index z-9">' + svgHTML + "</div>";
        const tlLetterSourceAnime = prepareAnimationHandler.animeLetterSource(
          container,
          30,
          0.05,
          "#FFFFFF",
          1.5
        );
        tlLetterSourceAnime.play();
      });

    letterSource.getLetters("U,N,*,P,E,T,I,T,*,P,E,U").then((letters) => {
      const container = document.querySelector(".container-un-petit-peu");
      const propertyFirstContainerWidth =
        container.getBoundingClientRect().width / 2;

      const svgHTML = letters
        .map((svg) =>
          svg !== "*" ? "<span>" + svg + "</span>" : '<b class="space"></b>'
        )
        .join("");

      container.innerHTML +=
        '<div class="absolute lm-typo index z-9" style="width: ' +
        propertyFirstContainerWidth +
        'px;">' +
        svgHTML +
        "</div>";

      const button = container.querySelector(".morph-button");
      let buttonHeight = 0;

      if (button) {
        buttonHeight = button.getBoundingClientRect().height / 2;
      } else {
        console.error(
          'Button with class ".morph-button" not found in .un-petit-peu container'
        );
      }

      const textContent1 = container.querySelector(".lm-typo");
      const propretyTextContentWidth = textContent1.offsetWidth / 2 + 20;

      textContent1.style.left =
        propertyFirstContainerWidth - propretyTextContentWidth + "px";
      textContent1.style.top = buttonHeight - 10 + "px";

      const tlLetterSourceAnime = prepareAnimationHandler.animeLetterSource(
        container,
        26,
        0.1,
        "#000000",
        1.5
      );
      tlLetterSourceAnime.play();
    });

    letterSource.getLetters("A,B,S,O,L,U,M,E,N,T,*,P,A,S").then((letters) => {
      const container = document.querySelector(".container-absolument-pas");
      const propertyFirstContainerWidth =
        container.getBoundingClientRect().width / 2;

      const svgHTML = letters
        .map((svg) =>
          svg !== "*" ? "<span>" + svg + "</span>" : '<b class="space"></b>'
        )
        .join("");

      container.innerHTML +=
        '<div class="absolute lm-typo index z-9" style="width: ' +
        propertyFirstContainerWidth +
        'px;">' +
        svgHTML +
        "</div>";

      const button = container.querySelector(".morph-button");
      let buttonHeight = 0;

      if (button) {
        buttonHeight = button.getBoundingClientRect().height / 2;
      } else {
        console.error(
          'Button with class ".morph-button" not found in .absolument-pas container'
        );
      }

      const textContent1 = container.querySelector(".lm-typo");
      const propretyTextContentWidth = textContent1.offsetWidth / 2 + 40;

      textContent1.style.left =
        propertyFirstContainerWidth - propretyTextContentWidth + "px";
      textContent1.style.top = buttonHeight - 10 + "px";

      const tlLetterSourceAnime = prepareAnimationHandler.animeLetterSource(
        container,
        26,
        0.1,
        "#000000",
        1.5
      );
      tlLetterSourceAnime.play();
    });
  }

  static animationsBrunchText(content) {
    const tl = gsap.timeline({paused: true});

    content.forEach((element) => {
      const blackBlock = document.createElement("div");

      blackBlock.style.position = "absolute";
      blackBlock.style.top = "0";
      blackBlock.style.background = "#29292E";
      blackBlock.style.left = "0";
      blackBlock.style.width = "0%";
      blackBlock.style.height = "100%";
      blackBlock.style.zIndex = "10";

      element.appendChild(blackBlock);

      const svgElementDom = blackBlock.querySelector("svg");
      const maskElementDom = blackBlock.querySelector("mask");
      const pathElementsDom = blackBlock.querySelectorAll("path");
      const blackBlockWidth = blackBlock.getBoundingClientRect().width;
      const blackBlockHeight = blackBlock.getBoundingClientRect().height;

      // tl.set([svgElementDom, maskElementDom], {
      //   attr: {
      //     width: blackBlockWidth,
      //     height: blackBlockHeight,
      //     viewbox: `0 0 ${blackBlockWidth} ${blackBlockHeight}`,
      //   },
      // });

      // tl.set(pathElementsDom, {drawSVG: "0% 0%"});
      // tl.to(pathElementsDom, {
      //   drawSVG: "0% 100%",
      //   duration: 0.5,
      //   ease: "power1.inOut",
      // });
      tl
        .to(blackBlock, {
          duration: 0.2,
          width: "100%",
          background: "#29292E",
          // drawSVG: "0% 100%",
          ease: "none",
          onComplete: () => {
            blackBlock.style.right = "0";
            blackBlock.style.left = null;
          },
        })
        .to(element.querySelector("h2"), {
          duration: 0,
          opacity: 1,
        })
        .to(blackBlock, {
          duration: 0.2,
          width: 0,
          // drawSVG: "0% 0%",
          ease: "none",
        }),
        "+=0.1";
    });

    return tl;
  }
  static eraseText() {
    const tl = gsap.timeline({paused: true});
    const lineErase = document.querySelectorAll(".line-erase-mauvaises path");

    if (lineErase.length > 0) {
      tl.to(lineErase, {
        drawSVG: "0% 100%",
        duration: 0.5,
        ease: "power1.inOut",
        onComplete: () => {
          letterSource
            .getLetters("M,A,U,V,A,I,S,E,S")
            .then((letters) => {
              const container = document.querySelector(
                ".mauvaises-text-letter"
              );
              const svgHTML = letters
                .map((svg) =>
                  svg != "*"
                    ? "<span>" + svg + "</span>"
                    : "<b class='space'></b>"
                )
                .join("");
              container.innerHTML += `<div class="lm-typo index z-9 rotate ro--350">${svgHTML}</div>`;

              const width = container.getBoundingClientRect().width;
              const tlLetterSourceAnime =
                prepareAnimationHandler.animeLetterSource(
                  container,
                  100,
                  0.3,
                  "#C62369",
                  1.5
                );
              return tlLetterSourceAnime.play();
            })
            .catch((error) => {
              console.error("Une erreur s'est produite :", error);
            });
        },
      });
    }

    return tl;
  }

  static transitionCardProject() {}

  static animationSwitch(element) {
    const tl = gsap.timeline({paused: true});
    const title = element.querySelector(".title h2");
    const fakeTitle = element.querySelector(
      ".fake-title .elementor-widget-container"
    );
    const svg = element.querySelector(".svg path");
    const container = element.querySelector(".container-image");
    const images = element.querySelectorAll(".container-image img");
    const illustration = element.querySelector(".image-switch img");
    const lineElement = element.querySelector(".line-decoration");
    const svgLineElement = element.querySelector(".line-decoration svg");
    const pathLineElement = element.querySelectorAll(".line-decoration path");

    tl.set(illustration, {
      opacity: 0,
    });

    tl.to(element, {
      flexGrow: 2,
      duration: 0.2,
    })
      .to(
        illustration,
        {
          transform: "translate(0, -10%)",
          duration: 0,
          opacity: 1,
        },
        "-=0.1"
      )

      .to(
        pathLineElement,
        {
          drawSVG: "100%",
          ease: "power1.inOut",
          stroke: "#C62369",
          duration: 0.3,
          opacity: 0.6,
        },
        "-=0.15"
      )
      .to(
        title,
        {
          color: "rgba(255, 255, 255, 0.6)",
          fontSize: "calc(1800vw / 1018)",
          letterSpacing: "2px",
          fontWeight: 400,
          duration: 0.1,
        },
        "-=0.25"
      )
      .to(
        fakeTitle,
        {
          opacity: 1,
          x: 0,
          y: 0,
          duration: 0.1,
        },
        "-=0.25"
      );

    // tl.to(container, {
    //   // width: newSize,
    //   // height: newSize,
    //   // top: newTop,
    //   left: 60,
    //   duration: 0,
    // });
    // .to(
    //   illustration,
    //   {
    //     width: newSize,
    //     height: newSize,
    //     transform: "translate(0, -50%)",
    //     duration: 0,
    //     onComplete: () => {
    //       tl.to(illustration, {
    //         opacity: 1,
    //         duration: 0.1,
    //       });
    //     },
    //   },
    //   "-=0.1"
    // )
    // .to(images, {duration: 0.1, opacity: 1, stagger: 0.1});

    return tl;
  }

  static animationCardProject() {
    const tl = gsap.timeline();
    const container = document.querySelector(".container-project-card");
    const cards = container.querySelectorAll(".jet-listing-grid__items > div");
    // const lastCard = container.querySelector(
    //   ".jet-listing-grid__items > div:last-child"
    // );

    // lastCard.querySelector(".elementor-widget-button").remove();
    // lastCard.querySelector(".container-right-project > div").remove();

    tl.set("footer", {
      position: "fixed",
      bottom: "-100vh",
      width: "100%",
      left: 0,
    });

    let cardMoves = Array(cards.length).fill(0);

    cards.forEach((card, index) => {
      const baseRise = 50;
      const offsetFactors = [1.1, 1.1, 1.1, 1.8, 2.5, 3.2, 3.9];
      const maxCardsToAdjust = 2;

      let yPos =
        -baseRise *
          offsetFactors[Math.min(index, offsetFactors.length - 1)] *
          Math.min(index, maxCardsToAdjust) +
        "vh";
      tl.to(card, {
        y: yPos,
        duration: 10,
        ease: "power2.out",
        onEnter: () => {
          utilsHandler.setWheelMultiplier(0.1, 0.01);
        },
      });

      if (index >= 3) {
        for (let i = 2; i >= 1; i--) {
          const newIndex = index - i;
          const prevCard = cards[newIndex];

          let currentY =
            -baseRise *
            offsetFactors[Math.min(newIndex, offsetFactors.length - 1)] *
            Math.min(newIndex, maxCardsToAdjust);

          cardMoves[newIndex]++;
          const newYPos = currentY - 15 * cardMoves[newIndex];

          const randomString = Math.random()
            .toString(36)
            .substring(2, 6)
            .toUpperCase();
          tl.to(
            prevCard,
            {
              y: newYPos + "vh",
              duration: 10,
              ease: "power2.out",
            },
            "-=7"
          );
        }
      }
    });

    tl.to(
      "footer",
      {
        bottom: 0,
        duration: 5,
        ease: "power2.out",
      },
      "+=0.5"
    );

    return tl;
  }

  static animeLetterSource(target, size, duration, color, max) {
    const tl = gsap.timeline({paused: true});
    const spanElement = target.querySelectorAll(".lm-typo > span");
    const pathElement = target.querySelectorAll(".lm-typo path");
    const svgElement = target.querySelectorAll(".lm-typo svg");
    let stagger;

    max = parseFloat(max).toFixed(2);
    const minMaxWidth = utilsHandler.setDynamicFontSize(size / max);
    size = parseInt(utilsHandler.setDynamicFontSize(size));

    switch (duration) {
      case 0.05:
        stagger = 0.05;
        break;
      case 0.06:
        stagger = 0.06;
        break;
      case 0.07:
        stagger = 0.07;
        break;
      case 0.08:
        stagger = 0.08;
        break;
      case 0.09:
        stagger = 0.09;
        break;
      case 0.1:
        stagger = 0.1;
      case 0.5:
        stagger = 0.5;
        break;
      case 0.7:
        stagger = 0.7;
        break;
      default:
        stagger = 0.1;
        break;
    }

    gsap.set(spanElement, {
      width: `calc(${size}vw / 1018)`,
      maxWidth: `calc(${minMaxWidth}vw / 1018)`,
      minWidth: `calc(${minMaxWidth}vw / 1018)`,
    });
    gsap.set(pathElement, {
      stroke: "#29292E",
    });
    gsap.set(svgElement, {
      attr: {
        width: `calc(${size}vw / 1018)`,
        height: `calc(${size}vw / 1018)`,
      },
    });

    tl.fromTo(
      pathElement,
      {
        drawSVG: "0%",
        duration: duration,
      },
      {
        drawSVG: "100%",
        duration: duration,
        stroke: color,
        stagger: stagger,
      }
    );
    return tl;
  }

  static animationMenuOpen(container, currentColorIndex) {
    const tl = gsap.timeline({paused: true});
    const tlShowMenuItem = prepareAnimationHandler.showMenuItem();
    const menu = document.querySelector(".menu");

    // const globalColor = getComputedStyle(
    //   document.querySelector(".elementor-kit-7")
    // ).getPropertyValue("--e-global-color-0259c30");

    tl.set(".menu", {
      mixBlendMode: "normal",
    });
    tl.set("#burgerDraw1", {
      stroke: prepareAnimationHandler.colors[currentColorIndex],
    });
    tl.set("#lineLogo path", {stroke: "#29292E", zIndex: 10});
    tl.set(".openMenu", {top: 0, duration: 0});
    tl.set(".menu", {background: "transparent", duration: 0.5});

    tl.to(["#burgerDraw1", "#lineLogo path"], {
      drawSVG: "0% 100%",
      duration: 1,
      ease: "power1.inOut",
      onComplete: function () {
        if (!document.querySelector(".target-adresse .lm-typo")) {
          letterSource
            .getLetters("V,I,E,N,S,*,N,O,U,S,*,D,I,R,E,*,B,O,N,J,O,U,R")
            .then((letters) => {
              const target = document.querySelector(".target-adresse");
              const widthElement = target
                .querySelector(".elementor-heading-title")
                .getBoundingClientRect().width;
              const sizeByCase = Math.round(widthElement / letters.length);
              const svgHTML = letters
                .map((svg) =>
                  svg != "*"
                    ? "<span>" + svg + "</span>"
                    : "<b class='space'></b>"
                )
                .join("");
              target.innerHTML += `<div class="lm-typo top t-25 left">${svgHTML}</div>`;

              const tlLetterSourceAnime =
                prepareAnimationHandler.animeLetterSource(
                  target,
                  sizeByCase,
                  0.05,
                  "28282D",
                  1
                );
              return tlLetterSourceAnime.play();
            })
            .catch((error) => {
              console.error("Une erreur s'est produite :", error);
            });
        }
      },
    })
      .to(
        ".detail-menu",
        {
          top: 0,
          zIndex: 9998,
          duration: 0,
        },
        "-=0.5"
      )
      .to("#lineLogo path", {
        drawSVG: "0% 0%",
        stroke: prepareAnimationHandler.colors[3],
        duration: 0.5,
        ease: "power1.inOut",
      })
      .to(
        "#mainLogo path",
        {
          fill: prepareAnimationHandler.colors[3],
          duration: 0.5,
          ease: "power1.inOut",
        },
        "=-0.3"
      );

    tl.tlShowMenuItem = tlShowMenuItem;
    return tl;
  }

  static animationMenuClose(container, currentColorIndex) {
    const tl = gsap.timeline({paused: true});
    const allLettersMenu = document.querySelectorAll(
      "#menu-1-4871bd2 li a > div:not(.invisible-container)"
    );

    allLettersMenu.forEach((letter, index) => {
      tl.from(
        letter,
        {
          y: 0,
          opacity: 1,
          duration: 0.1,
          stagger: 0.05,
          ease: "bounce.out",
        },
        index * 0.01
      );
    });

    return tl;
  }

  static splitText(contentNewsProject, type) {
    const tl = gsap.timeline({paused: true});

    const splitProject = new SplitText(contentNewsProject, {type: type});
    let project;

    switch (type) {
      case "words":
        project = splitProject.words;
        break;
      case "chars":
        project = splitProject.chars;
        break;
    }

    gsap.set(contentNewsProject, {
      y: 0,
      duration: 0,
    });

    project.forEach((char, index) => {
      tl.from(
        char,
        {
          y: 0,
          opacity: 0,
          duration: 0.2,
          ease: "power4.out",
        },
        "-=0.1"
      );
    });

    return tl;
  }

  static animationLoaderPercent(balls, world, obstacleZero, ground) {
    const tl = gsap.timeline({paused: true});
    const text = document.querySelector(".zero-text");
    const steps = 4;

    function animateStep(step, duration, newText) {
      text.innerHTML = newText;
      const splitText = new SplitText(text, {type: "chars"});

      tl.from(splitText.chars, {
        y: 200,
        stagger: 0.1,
        delay: 0.2,
        duration: 0.4,
      });
      if (step < steps) {
        tl.to(splitText.chars, {
          y: -200,
          stagger: 0.1,
          delay: 0.2,
          duration: 0.4,
          onComplete: function () {
            animateStep(
              step + 1,
              duration,
              (parseInt(newText) + 25).toString()
            );
          },
        });
      } else {
        Matter.World.remove(world, ground);
        // const loader = document.querySelector(".loader");
        setTimeout(() => {
          gsap.to(".menu", {
            opacity: 1,
            duration: 0,
          });
          gsap.to(loader, {
            duration: 1,
            opacity: 0,
            ease: "power4.out",
            onComplete: () => {
              gsap.to(loader, {
                duration: 0,
                y: "100vh",
                ease: "none",
              });
            },
          });
        }, 2000);
      }
    }

    animateStep(1, 1, "25");

    return tl;
  }
  static detailMenu() {
    menuHandler.setStaticValue();
    menuHandler.loadCursor();
    menuHandler.cursorMorph();
    menuHandler.initChangeColor();

    const menu = document.querySelector(".menu");
    const logo = document.querySelector(".main-logo");
    const button =
      menu.querySelector(".menu-button") || menu.querySelector(".burger-icon");
    const container = document.querySelector(".detail-menu");
    logo.addEventListener("click", () => {
      window.location.href = "/";
    });

    const tlOpen = prepareAnimationHandler.animationMenuOpen(
      container,
      prepareAnimationHandler.currentColorIndex
    );

    container.addEventListener("mouseleave", () => {
      if (prepareAnimationHandler.isOpen) {
        menuHandler.isOpen = false;

        tlOpen.tlShowMenuItem.timeScale(1).reverse();
        tlOpen.reverse();
        prepareAnimationHandler.isOpen = !prepareAnimationHandler.isOpen; // Inverser l'état isOpen
      }
    });

    button.addEventListener("click", () => {
      if (prepareAnimationHandler.isOpen) {
        menuHandler.isOpen = false;

        tlOpen.tlShowMenuItem.timeScale(1).reverse();
        tlOpen.reverse();
      } else {
        menuHandler.isOpen = true;

        tlOpen.tlShowMenuItem.timeScale(0.7).play();
        tlOpen.play();
      }

      prepareAnimationHandler.isOpen = !prepareAnimationHandler.isOpen; // Inverser l'état isOpen
    });
  }

  static showMenuItem() {
    const tl = gsap.timeline({paused: true});

    const menuItems = document.querySelectorAll("#menu-1-4871bd2 li a");

    menuItems.forEach((line, index) => {
      const uniqueMaskId = `mask0_3562_37614_2${index}`;
      const svg = `<svg  style="visibility: hidden" class="absolute" width="468" height="54" viewBox="0 0 468 54" fill="none" xmlns="http://www.w3.org/2000/svg"> <mask id="${uniqueMaskId}" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="0" y="0" width="468" height="54">
    <path d="M339.542 2.47479C338.275 2.63604 337.008 2.79354 335.741 2.95479C335.793 3.21354 335.849 3.47604 335.901 3.73479C337.482 3.54354 339.64 3.76104 340.546 3.08604C344.048 0.479795 348.281 2.00604 352.149 1.66479C352.654 1.61979 353.215 2.55355 353.905 2.79355C354.616 3.0373 355.522 2.98855 356.341 3.06355V1.11354C358.01 1.47354 359.617 1.81854 361.373 2.19729C361.409 2.12979 361.635 1.69854 361.986 1.03479C362.892 1.57104 363.726 2.05854 364.586 2.56854C365.951 1.48854 367.321 -0.476462 368.871 2.79729C372.322 -1.33146 375.69 2.24229 379.31 2.89854C379.192 1.98354 379.109 1.33479 379.027 0.686036L379.537 0.566045C379.985 1.27479 380.438 1.97979 381.221 3.21354C381.767 2.05479 382.081 1.37979 382.441 0.611043C385.897 2.13354 389.311 3.08979 393.056 0.806039C393.334 1.18854 393.844 1.90479 394.353 2.61729C394.704 2.42229 395.054 2.22729 395.404 2.02854C395.461 1.49229 395.517 0.959793 395.553 0.599793C397.5 1.10604 399.189 1.54479 400.878 1.97979C401.043 -0.637709 403.366 0.731046 404.885 0.907296C405.678 1.00105 406.379 1.52604 407.264 1.92354C407.754 1.45479 408.346 0.884789 408.933 0.31479C409.015 0.55479 409.098 0.791041 409.185 1.03104C410.298 0.952291 411.405 0.832289 412.517 0.806039C413.553 0.783539 414.593 0.911043 415.628 0.881043C422.998 0.671043 430.367 0.416046 437.742 0.251046C438.587 0.232296 439.452 0.689788 440.914 1.09854C443.062 1.09854 446.095 0.933536 449.072 1.15479C451.287 1.31979 453.455 1.93854 455.607 2.43729C456.746 2.69979 458.481 2.97729 458.739 3.53979C459.053 4.22979 458.193 5.25354 457.683 6.08604C457.276 6.75729 456.56 7.32729 456.122 7.99104C453.3 12.2698 448.82 13.6423 441.965 13.0348C439.194 12.791 436.249 13.9198 433.344 14.0735C429.548 14.276 425.717 14.066 421.911 14.171C420.783 14.201 419.702 14.8835 418.564 14.9548C408.197 15.6223 397.814 16.1473 387.458 16.8673C378.043 17.5198 368.655 18.3748 359.256 19.121C355.538 19.4173 351.819 19.7623 348.086 19.9123C342.658 20.1298 337.194 20.0098 331.786 20.3623C325.287 20.7823 318.823 21.5285 312.35 22.1773C311.84 22.2298 311.397 22.6385 311.037 23.366C316.537 22.166 321.919 23.5085 327.403 23.1035C332.409 22.736 337.564 23.4485 342.822 23.6735C343.966 23.7185 345.109 23.8198 346.252 23.801C348.869 23.7485 351.485 23.5423 354.096 23.5723C358.777 23.6248 363.459 23.9173 368.135 23.8985C371.92 23.8835 375.716 23.3473 379.49 23.426C384.053 23.5198 388.616 23.9473 393.159 24.3635C397.809 24.791 402.434 25.376 407.682 25.961C406.616 28.1398 405.709 29.9885 404.617 32.2123C404.921 32.516 405.673 33.2585 406.42 34.0048L406.667 33.1423C410.102 33.3523 413.542 33.5548 416.977 33.7723C417.616 33.8135 418.27 34.0085 418.883 33.9485C422.256 33.626 425.604 33.1798 428.987 32.9323C429.677 32.8835 430.424 33.5698 431.207 33.8098C431.768 33.9823 432.541 34.1623 433.035 34.016C437.006 32.8198 436.995 32.7973 440.24 34.016C443.139 30.3223 446.24 35.3173 449.407 33.7873C449.134 33.5435 448.809 33.251 448.217 32.7223C454.026 33.2173 459.578 33.506 464.991 34.3048C466.108 34.4698 467.411 36.5585 467.319 37.7023C467.236 38.666 465.243 39.5398 463.884 40.6235C465.485 42.596 465.114 43.1735 460.907 43.0685C453.702 42.8923 446.502 42.3785 439.303 42.3485C434.487 42.3298 429.672 43.031 424.841 43.1735C419.454 43.3348 414.052 43.2185 408.655 43.2373C402.393 43.2598 396.13 43.316 389.868 43.3198C381.607 43.3273 373.347 43.1735 365.091 43.3198C359.302 43.421 353.534 44.0398 347.746 44.1748C343.085 44.2835 338.414 43.9498 333.743 43.9385C331.101 43.931 328.459 44.186 325.817 44.3173C314.307 44.8948 302.807 45.6223 291.286 46.001C282.562 46.286 273.807 46.0423 265.068 46.1923C261.283 46.2598 257.523 46.8448 253.738 46.991C245.58 47.3023 237.412 47.4785 229.244 47.7073C226.716 47.7785 224.177 47.7935 221.653 47.9098C213.82 48.2735 205.992 48.6635 198.159 49.0573C186.726 49.6273 175.298 50.2498 163.865 50.7598C160.301 50.9173 156.707 50.786 153.133 50.786C153.102 50.4898 153.066 50.1898 153.035 49.8935C160.116 49.5523 167.197 49.2073 175.283 48.8173C173.897 48.1273 173.032 47.3323 172.285 47.3848C162.969 48.0485 153.663 48.8323 144.455 50.2723C146.772 50.111 149.09 49.9535 151.407 49.7923C151.464 50.0773 151.526 50.3623 151.582 50.6473C146.638 52.196 141.118 51.3448 135.942 51.911C130.483 52.511 124.947 52.7885 119.441 53.1298C113.9 53.471 108.348 53.7185 103.466 53.9735C102.554 50.8685 101.766 48.1798 100.917 45.2773C102.652 45.5885 103.631 45.7648 104.609 45.941C104.831 45.2248 105.057 44.5085 105.227 43.9535C119.019 42.8998 133.109 41.8198 147.2 40.7435C147.215 40.2935 147.236 39.8473 147.251 39.3973C142.755 40.0273 138.553 38.9885 134.247 38.8798C129.195 38.7523 124.123 39.0035 119.065 39.2135C114.039 39.4235 109.028 39.7835 104.017 40.0798C104.213 37.961 104.372 36.1723 104.532 34.4398C99.1142 34.541 102.827 31.001 100.494 29.801C103.857 29.3548 106.726 28.976 109.847 28.5635C109.651 28.9273 109.404 29.3885 109.157 29.8498C109.368 30.011 109.579 30.1723 109.785 30.3298C110.702 29.6998 111.613 29.066 112.473 28.4735C114.508 30.5435 118.004 29.0548 121.089 28.856C128.366 28.3835 135.617 27.6898 142.874 27.0598C149.62 26.471 156.367 25.8523 163.108 25.241C171.255 24.4985 179.403 23.7485 187.55 23.006C195.749 22.256 203.942 21.4835 212.146 20.7823C215.664 20.4823 219.207 20.3248 222.74 20.1073C229.028 19.7135 235.321 19.346 241.604 18.8998C242.294 18.851 242.928 18.3785 244.674 17.651C242.629 17.3735 241.558 17.0698 240.523 17.1148C233.019 17.456 225.526 17.9023 218.023 18.2435C210.03 18.611 210.025 18.5773 208.304 19.6648C205.925 18.0185 201.81 18.1123 200.142 19.5785H192.648C192.654 19.6235 192.659 19.6648 192.664 19.7098C188.874 19.7098 185.068 19.5673 181.293 19.7435C176.199 19.9835 171.121 20.4748 166.038 20.846C161.125 21.206 156.212 21.5773 151.289 21.8848C147.869 22.0985 144.408 22.0685 141.009 22.3948C136.925 22.7848 132.903 23.5198 128.825 23.9473C126.069 24.236 123.263 24.2473 120.482 24.3898C118.586 24.4873 116.686 24.5285 114.806 24.7048C109.883 25.1698 104.98 25.7435 100.051 26.1785C95.3856 26.591 90.6991 26.8723 86.0177 27.2248C78.6069 27.7835 71.1857 28.2635 63.7955 28.946C55.8027 29.6848 47.8459 30.6298 39.8634 31.451C35.8928 31.8598 31.9015 32.141 27.9412 32.5873C23.1002 33.131 18.2901 33.8285 13.4491 34.3835C9.43722 34.8448 5.39962 35.1898 1.37747 35.591L0.826416 34.8298C3.12847 34.0648 5.43052 33.2998 7.73257 32.5348C7.62442 32.2198 7.51627 31.9048 7.40812 31.5898C4.42112 32.5085 1.98002 32.4298 2.67012 29.7185C2.92247 28.7248 4.76617 27.3823 6.13607 27.1948C13.5109 26.1973 20.9732 25.5485 28.3944 24.7123C35.7022 23.8873 42.9895 22.9798 50.4106 22.0948C50.2767 21.4798 50.1325 20.8423 49.9935 20.2048C51.0338 22.571 53.1504 21.7385 55.2259 21.4235C58.5785 20.9135 61.9672 20.4823 65.3714 20.2048C67.8279 20.006 70.3257 20.1298 72.808 20.096C75.0328 20.066 75.0122 20.0585 75.2233 18.101C75.2439 17.921 75.692 17.606 75.8928 17.6248C76.3718 17.6735 76.9074 17.8085 77.2576 18.041C77.8859 18.4573 78.3957 18.971 78.9571 19.4435C79.2609 18.7798 79.5648 18.116 79.6214 17.996C83.005 18.3785 86.4967 18.7723 90.2819 19.1998V16.376C90.5858 16.256 90.8845 16.1398 91.1883 16.0198C91.6467 16.6198 92.105 17.2198 93.0063 18.3935C94.4637 18.2435 96.7761 17.936 99.109 17.7748C105.16 17.3548 111.232 17.0698 117.263 16.5448C118.324 16.451 119.235 15.4535 120.219 14.8723C120.152 14.5085 120.08 14.141 120.013 13.7773C121.239 14.3285 122.459 14.8798 124.339 15.7273C124.509 15.6148 125.379 15.0373 126.255 14.4598C126.316 14.6735 126.383 14.891 126.445 15.1048C127.424 14.9173 128.402 14.726 129.381 14.5385L129.087 13.9273C130.926 14.2723 132.764 14.6173 134.608 14.9585L134.948 14.5273C134.505 14.2573 134.057 13.9835 133.073 13.3835H135.586C135.2 15.4873 137.482 15.0185 138.713 14.7973C140.036 14.561 141.143 13.691 141.833 13.3535C144.372 13.6685 146.834 14.3285 149.213 14.2048C157.047 13.8035 164.859 13.1698 172.661 12.5098C174.52 12.3523 177.662 12.9373 176.601 9.89229C179.578 9.91104 182.596 9.05979 184.882 11.261C185.145 11.5123 186.149 11.426 186.798 11.381C200.27 10.4698 213.748 9.55104 227.21 8.57604C227.766 8.53479 228.25 7.92729 228.755 7.57104C229.11 7.31979 229.445 6.83604 229.785 6.83604C230.475 6.83604 231.397 6.95229 231.799 7.28604C232.947 8.24604 232.757 8.19728 233.9 7.52978C234.827 6.98979 236.063 6.72728 236.151 6.69728C238.571 7.13978 240.085 7.41729 241.599 7.69479C241.517 7.27104 241.434 6.85104 241.383 6.59229C243.386 6.84354 245.776 7.14354 248.16 7.44354C248.078 7.09479 248.001 6.74229 247.846 6.07854C249.072 6.70104 250.107 8.28729 251.621 6.15354C252.085 5.50104 256.148 6.18354 258.558 6.28479C259.588 6.32604 260.958 6.78729 261.592 6.46104C265.464 4.46229 270.892 4.25229 274.049 5.66229C277.134 5.26479 279.838 4.26354 281.198 4.86729C284.282 6.23979 286.44 4.45479 288.717 4.50354C294.67 4.63479 300.629 1.97979 306.592 4.34229C306.685 4.37979 309.754 5.60229 308.626 3.34854C309.409 3.17229 310.187 2.87229 310.98 2.83479C315.007 2.63979 319.045 2.51229 323.325 2.35104C323.603 2.97729 323.901 3.65979 324.143 4.20729C325.766 4.13979 327.218 4.08354 328.881 4.01604C328.799 3.51354 328.717 2.99604 328.516 1.78104C332.378 4.10604 335.824 1.88229 339.429 1.69104C339.475 1.94229 339.516 2.19354 339.563 2.44479L339.542 2.47479ZM169.952 18.2398C166.754 18.2698 163.551 18.2585 160.353 18.371C159.791 18.3898 159.266 18.9335 158.725 19.2335C159.117 19.5185 159.549 20.081 159.894 20.051C163.582 19.7435 167.254 19.346 170.931 18.9748C181.684 18.9298 184.46 18.5135 185.14 16.2598C179.882 16.946 174.917 17.5948 169.952 18.2398ZM208.212 16.1585C209.18 16.3198 210.169 16.6573 211.122 16.6123C218.687 16.256 226.252 15.8435 233.807 15.386C234.219 15.3598 234.575 14.7785 234.951 14.456C234.338 14.2498 233.715 13.856 233.107 13.8673C228.359 13.9648 223.6 14.0473 218.862 14.321C215.298 14.5273 211.765 15.0035 208.222 15.3598C202.739 15.4948 199.907 16.1535 199.725 17.336C202.624 16.9348 205.415 16.5485 208.207 16.1585H208.212ZM190.058 46.9648C190.182 47.3285 190.31 47.696 190.434 48.0598C202.083 47.5948 213.727 47.1335 225.439 46.6685C224.306 45.0335 221.875 44.7485 217.925 45.011C209.777 45.5585 201.599 45.8323 193.436 46.2748C192.293 46.3385 191.186 46.7248 190.063 46.961L190.058 46.9648ZM148.477 35.8835C148.549 36.2323 148.621 36.581 148.698 36.9298C160.827 36.3185 172.95 35.7073 185.078 35.096C185.202 34.8598 185.32 34.6235 185.438 34.3835C184.707 34.0948 183.955 33.5473 183.255 33.581C182.271 33.6298 181.339 34.3535 180.366 34.3723C173.954 34.4998 167.527 34.3723 161.12 34.6198C156.887 34.7848 152.69 35.4448 148.472 35.8798L148.477 35.8835ZM147.756 40.7173C157.083 39.956 165.369 39.281 174.088 38.5685C170.952 37.0873 150.393 38.4223 147.756 40.7173ZM448.696 41.066C444.798 38.6023 434.477 38.5873 430.517 41.066H448.696ZM225.964 33.131L225.861 32.0623C219.217 32.366 212.574 32.6735 205.93 32.9773C205.961 33.296 205.992 33.6148 206.028 33.9298C212.672 33.6635 219.32 33.3973 225.964 33.131ZM284.973 44.1973C281.764 41.9773 275.409 42.3298 273.993 44.1973H284.973ZM250.05 22.8335C250.066 23.2535 250.076 23.6735 250.092 24.0898C255.159 23.861 260.232 23.6323 265.299 23.4035C265.31 23.141 265.315 22.8748 265.32 22.6123C260.247 20.6248 255.123 24.3035 250.045 22.8298L250.05 22.8335ZM157.113 18.9823C156.944 18.746 156.779 18.5098 156.609 18.2698C153.308 18.7048 150.006 19.1435 146.705 19.5785C146.824 19.9573 146.942 20.3323 147.061 20.711C150.315 19.8335 154.343 21.3973 157.113 18.9785V18.9823ZM256.138 45.0298C258.98 44.4748 262.529 46.031 265.768 43.5373C261.602 43.2485 258.409 42.761 256.138 45.0298Z" fill="#CDDD20"/>
    </mask><g mask="url(#${uniqueMaskId})"><path d="M4 31L210.5 13L452.5 5.5L105 31L402 27.5L105 49.5L465 38.5" stroke="#CDDD20" stroke-width="20"/></g></svg>`;

      const widthElement = line.offsetWidth;
      const heightElement = line.offsetHeight;
      line.innerHTML += svg;
      line.innerHTML += `<div class="invisible-container"></div>`;
      const pathElement = line.querySelectorAll("path");
      tl.set(pathElement, {
        drawSVG: "0% 0%",
      });
      const svgElement = line.querySelector("svg");
      const chars = new SplitText(line, {type: "chars"}).chars;
      const randomDelay = Math.random() * (0.3 - 0.1) + 0.1;

      if (index == 2) {
        const letterS = chars.find(
          (char) => char.textContent.toLowerCase() === "s"
        );
        if (letterS) {
          tl.set(
            letterS,
            {
              marginRight: 40,
            },
            0
          );
        }
      }

      const tlLineSvg = prepareAnimationHandler.animationMenu(pathElement);

      const target = line.querySelector(".invisible-container");

      tl.set(svgElement, {
        autoAlpha: 1,
        left: -40,
        visibility: "visible",
        width: widthElement,
        height: heightElement,
      });
      tl.from(
        chars,
        {
          y: 20,
          opacity: 0,
          duration: 0.1,
          stagger: 0.05,
          ease: "bounce.out",
        },
        index * 0.15
      );

      target.addEventListener("mouseenter", () => {
        tlLineSvg.play();
      });

      target.addEventListener("mouseout", () => {
        tlLineSvg.reverse();
      });
    });

    return tl;
  }

  static animationColor(icon, currentColorIndex) {
    const tl = gsap.timeline({paused: true});
    console.log(currentColorIndex === 2);
    tl.to(icon, {
      x: "-80px",
      rotate: -180,
      duration: 0.7,
      onComplete: function () {
        gsap.to(icon.querySelector("circle"), {
          fill: prepareAnimationHandler.colors[currentColorIndex],
          duration: 0,
        });
        gsap.to(icon.querySelector("svg"), {
          fill: currentColorIndex === 2 ? "black" : "white",
          duration: 0,
        });
      },
    }).to(icon, {
      x: 0,
      rotate: -360,
      duration: 0.7,
    });

    return tl;
  }

  static changeLineMorph(currentColorIndex) {
    const tl = gsap.timeline({paused: true});

    const logo = document.querySelector("#mainLogo");
    const logoPath = logo.querySelectorAll("path");
    const width = logo.getBoundingClientRect().width;
    const height = logo.getBoundingClientRect().height;

    const contactContent = document.querySelector(".target-adresse");
    const aElementContact = contactContent.querySelector("a");
    const svgPathElementContact = contactContent.querySelectorAll("svg path");

    const detailMenu = document.querySelector(".detail-menu .navigation");
    const letters = detailMenu.querySelectorAll(".menu-item a div");
    const svgs = detailMenu.querySelectorAll(".menu-item svg path");

    const span = document.querySelectorAll(".detail-menu span");

    tl.set("#lineLogo", {
      attr: {
        width: width + 50,
        height: height,
      },
    });

    tl.to(
      "#lineLogo path",
      {
        drawSVG: menuHandler.isOpen ? "0% 0%" : "0% 100%",
        stroke: prepareAnimationHandler.colors[currentColorIndex],
        duration: 1,
        ease: "power1.inOut",
      },
      "sync"
    )
      .to(
        "#mainLogo path",
        {
          fill: menuHandler.isOpen
            ? currentColorIndex === 0
              ? "white"
              : prepareAnimationHandler.colors[3]
            : prepareAnimationHandler.colors[currentColorIndex],
          duration: 0.5,
          ease: "power1.inOut",
        },
        "sync+=0.7"
      )
      .to(
        "#lineLogo path",
        {
          drawSVG: "0% 0%",
          stroke: prepareAnimationHandler.colors[currentColorIndex],
          duration: 0.5,
          ease: "power1.inOut",
          onComplete: function () {
            tl.to(".svg-line", {zIndex: -1, duration: 0});
          },
        },
        "sync+=1"
      );

    tl.to(
      ".openMenu path",
      {
        stroke: prepareAnimationHandler.colors[currentColorIndex],
        duration: 1,
      },
      "sync"
    ).to(
      svgs,
      {
        stroke: prepareAnimationHandler.colors[currentColorIndex],
        duration: 1,
      },
      "sync"
    );

    if (currentColorIndex === 0) {
      tl.to(
        [letters, logoPath, aElementContact, span],
        {
          color: "white",
          fill: "white",
          duration: 1,
        },
        "sync"
      );
      tl.to(
        svgPathElementContact,
        {
          stroke: "white",
          duration: 1,
        },
        "sync"
      );
    } else {
      tl.to(
        [letters, logoPath, aElementContact, span],
        {
          color: prepareAnimationHandler.colors[3],
          duration: 1,
        },
        "sync-=0.3"
      );
      tl.to(
        svgPathElementContact,
        {
          stroke: prepareAnimationHandler.colors[3],
          duration: 1,
        },
        "sync-=0.3"
      );
    }

    return tl;
  }
  static changeBurgerColor(currentColorIndex) {
    const tl = gsap.timeline({paused: true});

    const circlePath = MorphSVGPlugin.convertToPath("#circle-start");
    const circlePathEnd = MorphSVGPlugin.convertToPath("#circle-end");
    const circleModel = document.querySelector(".circle-model svg circle");

    tl.set(circlePath, {
      duration: 0,
      fill: prepareAnimationHandler.colors[currentColorIndex],
      morphSVG: circlePath,
    });

    tl.to(circlePath, {
      duration: 0.7,
      fill: prepareAnimationHandler.colors[currentColorIndex],
      morphSVG: "#morph1",
    })
      .to(
        circlePath,
        {
          duration: 0.7,
          fill: prepareAnimationHandler.colors[currentColorIndex],
          morphSVG: "#morph2",
        },
        "-=0.3"
      )
      .to(
        circlePath,
        {
          duration: 0.7,
          fill: prepareAnimationHandler.colors[currentColorIndex],
          morphSVG: "#morph3",
        },
        "-=0.3"
      )
      .to(
        circlePath,
        {
          duration: 0.7,
          fill: prepareAnimationHandler.colors[currentColorIndex],
          morphSVG: circlePathEnd,
        },
        "-=0.3"
      )
      .to(circleModel, {
        duration: 0.7,
        fill: prepareAnimationHandler.colors[currentColorIndex],
      });

    return tl;
  }

  static switchColor(currentColorIndex) {
    const tl = gsap.timeline({paused: true});
    const elements = document.querySelectorAll(".color-switcher");
    const allElements = document.querySelectorAll("main *");

    tl.staggerTo(allElements, 0.3, {
      "--e-global-color-0259c30":
        prepareAnimationHandler.colors[currentColorIndex],
    });
    if (elements.length > 0) {
      tl.staggerTo(
        elements,
        0.3,
        {
          backgroundColor: prepareAnimationHandler.colors[currentColorIndex],
        },
        0
      );
    }

    return tl;
  }

  static animationFooter(element) {
    const tl = gsap.timeline({paused: true});

    tl.fromTo(
      element,
      {drawSVG: "0% 0%"}, // SVG caché par défaut
      {drawSVG: "0% 100%", duration: 0.5, ease: "power2.inOut"} // SVG visible au survol
    );

    return tl;
  }

  static animationMenu(element) {
    const tl = gsap.timeline({paused: true});

    tl.fromTo(
      element,
      {drawSVG: "0% 0%"}, // SVG caché par défaut
      {drawSVG: "0% 100%", duration: 0.5, ease: "power2.inOut"} // SVG visible au survol
    );

    return tl;
  }

  static constructTransition(state) {
    // GSAP TIMELINE INIT
    const tl = gsap.timeline({ paused: true });

    // SIZES
    const containerTransition = document.querySelector(".transition");
    const clientRect = containerTransition.getBoundingClientRect();
    const { height, top, width } = clientRect

    // CONTAINERS
    const colorContainer = document.querySelector('.colorContainer')
    const colorBlocks = document.querySelectorAll('.colorBlock')
    colorBlocks.forEach((block, idx) => block.classList.add(`block-${idx}`))

    // NOISE BACKGROUND
    const noise = containerTransition.querySelector('.pixel')

    // LOCAL STORAGE COLORS
    const currentIndexColor = localStorage.getItem('currentColorIndex')
    const currentColor = prepareAnimationHandler.colors[currentIndexColor]
    const pink = prepareAnimationHandler.colors[0]
    const purple = prepareAnimationHandler.colors[1]
    const yellow = prepareAnimationHandler.colors[2]
    const gray = prepareAnimationHandler.colors[3]

    //AGENCY LOGO
    const transitionLogo = containerTransition.querySelector('.logosvg');
    const transitionLogoPath = transitionLogo.querySelectorAll('path')

    // SETTERS
    tl.set(containerTransition, { backgroundColor: currentColor === purple ? gray : currentColor })
    tl.set(colorBlocks, { height: 0 })
    tl.set(transitionLogo, { opacity: 0, position: "fixed" })
    tl.set(transitionLogoPath, { fill: currentColor !== yellow ? yellow : "#000000" })

    tl.to(containerTransition, {
      duration: 0,
      opacity: 1,
      zIndex: 9999,
      attr: {},
    })

    if (state) {
      tl.to(containerTransition, {
        duration: 0.25,
        opacity: 1,
        top: 0,
      }).fromTo(noise, {
        bottom: -height,
        opacity: 0,
      }, {
        opacity: 0.15,
        top: 0,
        duration: 0,
      }, 0)

      tl.fromTo(colorContainer, {
        top: height,
      }, {
        top: -1250,
        duration: 2,
        ease: "power4.inOut"
      }, 0.2).to(".block-0", {
        height: 600,
        background: currentColor === pink ? gray : pink,
        duration: 0.15,
        ease: "expo.inOut"
      }, 0.15).to(".block-1", {
        height: 400,
        duration: 0.5,
        background: purple,
        ease: "expo.inOut"
      }, 0.5).to(".block-2", {
        height: 250,
        duration: 0.15,
        background: currentColor === yellow ? gray : yellow,
        ease: "expo.inOut"
      }, 0.25)

      tl.fromTo(transitionLogo, {
        opacity: 0,
        top: top + 48,
        scale: 0.76
      }, {
        opacity: 1,
        top: height / 2,
        scale: 2,
        translateY: "-50%",
        duration: 0.6,
        ease: "expo.inOut"
      }, 0)

      tl.to(transitionLogo, {
        opacity: 0,
        duration: 0.25,
      }, 1.1)

    } else {
      tl.set(".menu", {
        visibility: "visible",
        duration: 0,
      });

      tl.fromTo(colorContainer, {
        top: -1250,
      }, {
        top: 1250,
        duration: 2.5,
        ease: "power4.inOut"
      }, 0.2)
        .to(".block-0", {
          height: 250,
          duration: 0.15,
          background: purple,
          ease: "expo.inOut"
        }, 0.15).to(".block-1", {
          height: 400,
          duration: 0.5,
          background: currentColor === pink ? gray : pink,
          ease: "expo.inOut"
        }, 0.5).to(".block-2", {
          height: 600,
          duration: 0.15,
          background: currentColor === yellow ? gray : yellow,
          ease: "expo.inOut",
        }, 0.25).fromTo(transitionLogo, {
          opacity: 0,
        }, {
          opacity: 1,
        }, 1.2)

      tl.fromTo(transitionLogo, {
        top: height / 2,
        translateY: "-50%",
        scale: 2,
      }, {
        top: top + 48,
        left: width / 2,
        translateX: -160,
        scale: 0.76,
        ease: "expo.inOut",
      }, 2).to(transitionLogo, {
        opacity: 0,
        duration: 0.15
      }, "-=0.25")

      tl.to(containerTransition, {
        bottom: -height,
        duration: 1.5,
        ease: "power4.inOut",
        onComplete: () => {
          tl.to(containerTransition, {
            zIndex: -1,
          })
        }
      }, 2).to(noise, {
        bottom: -height,
        duration: 1.5,
        opacity: 0,
      }, 2)

    }
    return tl;
  }

}
